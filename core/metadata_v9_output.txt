[core/src/metadata.rs:109] &meta = RuntimeMetadataPrefixed(
    1635018093,
    RuntimeMetadata::V9(
        RuntimeMetadataV9 {
            modules: [
                ModuleMetadata {
                    name: "System",
                    storage: Some(
                        StorageMetadata {
                            prefix: "System",
                            entries: [
                                StorageEntryMetadata {
                                    name: "AccountNonce",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "T::Index",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Extrinsics nonce for accounts.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ExtrinsicCount",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Total extrinsics count for the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "AllExtrinsicsWeight",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "Weight",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Total weight for all extrinsics put together, for the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "AllExtrinsicsLen",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Total length (in bytes) for all extrinsics put together, for the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "BlockHash",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::BlockNumber",
                                        value: "T::Hash",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Map of block numbers to block hashes.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ExtrinsicData",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "u32",
                                        value: "Vec<u8>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Extrinsics data for the current block (maps an extrinsic\'s index to its data).",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Number",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::BlockNumber",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The current block number being processed. Set by `execute_block`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ParentHash",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::Hash",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Hash of the previous block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ExtrinsicsRoot",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::Hash",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Extrinsics root of the current block, also part of the block header.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Digest",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "DigestOf<T>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Digest of the current block, also part of the block header.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Events",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<EventRecord<T::Event, T::Hash>>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Events deposited for the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "EventCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "EventIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The number of events in the `Events<T>` list.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "EventTopics",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "()",
                                        key2: "T::Hash",
                                        value: "Vec<(T::BlockNumber, EventIndex)>",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                                        " of events in the `<Events<T>>` list.",
                                        "",
                                        " The first key serves no purpose. This field is declared as double_map just",
                                        " for convenience of using `remove_prefix`.",
                                        "",
                                        " All topic vectors have deterministic storage locations depending on the topic. This",
                                        " allows light-clients to leverage the changes trie storage tracking mechanism and",
                                        " in case of changes fetch the list of events of interest.",
                                        "",
                                        " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                                        " the `EventIndex` then in case if the topic has the same contents on the next block",
                                        " no notification will be triggered thus the event might be lost.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "fill_block",
                                arguments: [],
                                documentation: [
                                    " A big dispatch that will disallow any other transaction to be included.",
                                ],
                            },
                            FunctionMetadata {
                                name: "remark",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "_remark",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Make some on-chain remark.",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_heap_pages",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "pages",
                                        ty: "u64",
                                    },
                                ],
                                documentation: [
                                    " Set the number of pages in the WebAssembly environment\'s heap.",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_code",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Set the new code.",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_storage",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "items",
                                        ty: "Vec<KeyValue>",
                                    },
                                ],
                                documentation: [
                                    " Set some items of storage.",
                                ],
                            },
                            FunctionMetadata {
                                name: "kill_storage",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "keys",
                                        ty: "Vec<Key>",
                                    },
                                ],
                                documentation: [
                                    " Kill some items from storage.",
                                ],
                            },
                            FunctionMetadata {
                                name: "kill_prefix",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "prefix",
                                        ty: "Key",
                                    },
                                ],
                                documentation: [
                                    " Kill all storage items with a key that starts with the given prefix.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "ExtrinsicSuccess",
                                arguments: [
                                    "DispatchInfo",
                                ],
                                documentation: [
                                    " An extrinsic completed successfully.",
                                ],
                            },
                            EventMetadata {
                                name: "ExtrinsicFailed",
                                arguments: [
                                    "DispatchError",
                                    "DispatchInfo",
                                ],
                                documentation: [
                                    " An extrinsic failed.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [
                        ErrorMetadata {
                            name: "RequireSignedOrigin",
                            documentation: [],
                        },
                        ErrorMetadata {
                            name: "RequireRootOrigin",
                            documentation: [],
                        },
                        ErrorMetadata {
                            name: "RequireNoOrigin",
                            documentation: [],
                        },
                    ],
                },
                ModuleMetadata {
                    name: "RandomnessCollectiveFlip",
                    storage: Some(
                        StorageMetadata {
                            prefix: "RandomnessCollectiveFlip",
                            entries: [
                                StorageEntryMetadata {
                                    name: "RandomMaterial",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::Hash>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Series of block headers from the last 81 blocks that acts as random seed material. This",
                                        " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                                        " the oldest hash.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: None,
                    event: None,
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Babe",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Babe",
                            entries: [
                                StorageEntryMetadata {
                                    name: "EpochIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u64",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Current epoch index.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Authorities",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(AuthorityId, BabeAuthorityWeight)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Current epoch authorities.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "GenesisSlot",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u64",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The slot at which the first epoch actually started. This is 0",
                                        " until the first block of the chain.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentSlot",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u64",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Current slot number.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Randomness",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "[u8; 32]",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The epoch randomness for the *current* epoch.",
                                        "",
                                        " # Security",
                                        "",
                                        " This MUST NOT be used for gambling, as it can be influenced by a",
                                        " malicious validator in the short term. It MAY be used in many",
                                        " cryptographic protocols, however, so long as one remembers that this",
                                        " (like everything else on-chain) it is public. For example, it can be",
                                        " used where a number is needed that cannot have been chosen by an",
                                        " adversary, for purposes such as public-coin zero-knowledge proofs.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NextRandomness",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "[u8; 32]",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Next epoch randomness.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SegmentIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Randomness under construction.",
                                        "",
                                        " We make a tradeoff between storage accesses and list length.",
                                        " We store the under-construction randomness in segments of up to",
                                        " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                                        "",
                                        " Once a segment reaches this length, we begin the next one.",
                                        " We reset all segments and return to `0` at the beginning of every",
                                        " epoch.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "UnderConstruction",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "u32",
                                        value: "Vec<[u8; 32]>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [],
                                },
                                StorageEntryMetadata {
                                    name: "Initialized",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "MaybeVrf",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Temporary value (cleared at block finalization) which is `Some`",
                                        " if per-block initialization has already been called for current block.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [],
                    ),
                    event: None,
                    constants: [
                        ModuleConstantMetadata {
                            name: "EpochDuration",
                            ty: "u64",
                            value: [
                                88,
                                2,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The number of **slots** that an epoch takes. We couple sessions to",
                                " epochs, i.e. we start a new session once the new epoch begins.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "ExpectedBlockTime",
                            ty: "T::Moment",
                            value: [
                                112,
                                23,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The expected average block time at which BABE should be creating",
                                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                                " what the expected average block time should be based on the slot",
                                " duration and the security parameter `c` (where `1 - c` represents",
                                " the probability of a slot being empty).",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Timestamp",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Timestamp",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Now",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::Moment",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Current time for the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DidUpdate",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "bool",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Did the timestamp get updated in this block?",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "now",
                                        ty: "Compact<T::Moment>",
                                    },
                                ],
                                documentation: [
                                    " Set the current time.",
                                    "",
                                    " This call should be invoked exactly once per block. It will panic at the finalization",
                                    " phase, if this call hasn\'t been invoked by that time.",
                                    "",
                                    " The timestamp should be greater than the previous one by the amount specified by",
                                    " `MinimumPeriod`.",
                                    "",
                                    " The dispatch origin for this call must be `Inherent`.",
                                ],
                            },
                        ],
                    ),
                    event: None,
                    constants: [
                        ModuleConstantMetadata {
                            name: "MinimumPeriod",
                            ty: "T::Moment",
                            value: [
                                184,
                                11,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The minimum period between blocks. Beware that this is different to the *expected* period",
                                " that the block production apparatus provides. Your chosen consensus system will generally",
                                " work with this to determine a sensible block time. e.g. For Aura, it will be double this",
                                " period on default settings.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Indices",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Indices",
                            entries: [
                                StorageEntryMetadata {
                                    name: "NextEnumSet",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::AccountIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The next free enumeration set.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "EnumSet",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountIndex",
                                        value: "Vec<T::AccountId>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The enumeration sets.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewAccountIndex",
                                arguments: [
                                    "AccountId",
                                    "AccountIndex",
                                ],
                                documentation: [
                                    " A new account index was assigned.",
                                    "",
                                    " This event is not triggered when an existing index is reassigned",
                                    " to another `AccountId`.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Balances",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Balances",
                            entries: [
                                StorageEntryMetadata {
                                    name: "TotalIssuance",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::Balance",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The total units issued in the system.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Vesting",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "VestingSchedule<T::Balance, T::BlockNumber>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Information regarding the vesting of a given account.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "FreeBalance",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "T::Balance",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The \'free\' balance of a given account.",
                                        "",
                                        " This is the only balance that matters in terms of most operations on tokens. It",
                                        " alone is used to determine the balance when in the contract execution environment. When this",
                                        " balance falls below the value of `ExistentialDeposit`, then the \'current account\' is",
                                        " deleted: specifically `FreeBalance`. Further, the `OnFreeBalanceZero` callback",
                                        " is invoked, giving a chance to external modules to clean up data associated with",
                                        " the deleted account.",
                                        "",
                                        " `frame_system::AccountNonce` is also deleted if `ReservedBalance` is also zero (it also gets",
                                        " collapsed to zero if it ever becomes less than `ExistentialDeposit`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReservedBalance",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "T::Balance",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The amount of the balance of a given account that is externally reserved; this can still get",
                                        " slashed, but gets slashed last of all.",
                                        "",
                                        " This balance is a \'reserve\' balance that other subsystems use in order to set aside tokens",
                                        " that are still \'owned\' by the account holder, but which are suspendable.",
                                        "",
                                        " When this balance falls below the value of `ExistentialDeposit`, then this \'reserve account\'",
                                        " is deleted: specifically, `ReservedBalance`.",
                                        "",
                                        " `frame_system::AccountNonce` is also deleted if `FreeBalance` is also zero (it also gets",
                                        " collapsed to zero if it ever becomes less than `ExistentialDeposit`.)",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Locks",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "Vec<BalanceLock<T::Balance, T::BlockNumber>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Any liquidity locks on some account balances.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "transfer",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "dest",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<T::Balance>",
                                    },
                                ],
                                documentation: [
                                    " Transfer some liquid free balance to another account.",
                                    "",
                                    " `transfer` will set the `FreeBalance` of the sender and receiver.",
                                    " It will decrease the total issuance of the system by the `TransferFee`.",
                                    " If the sender\'s account is below the existential deposit as a result",
                                    " of the transfer, the account will be reaped.",
                                    "",
                                    " The dispatch origin for this call must be `Signed` by the transactor.",
                                    "",
                                    " # <weight>",
                                    " - Dependent on arguments but not critical, given proper implementations for",
                                    "   input config types. See related functions below.",
                                    " - It contains a limited number of reads and writes internally and no complex computation.",
                                    "",
                                    " Related functions:",
                                    "",
                                    "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                                    "   - Transferring balances to accounts that did not exist before will cause",
                                    "      `T::OnNewAccount::on_new_account` to be called.",
                                    "   - Removing enough funds from an account will trigger",
                                    "     `T::DustRemoval::on_unbalanced` and `T::OnFreeBalanceZero::on_free_balance_zero`.",
                                    "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                                    "     check that the transfer will not kill the origin account.",
                                    "",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_balance",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "who",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "new_free",
                                        ty: "Compact<T::Balance>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "new_reserved",
                                        ty: "Compact<T::Balance>",
                                    },
                                ],
                                documentation: [
                                    " Set the balances of a given account.",
                                    "",
                                    " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                                    " also decrease the total issuance of the system (`TotalIssuance`).",
                                    " If the new free or reserved balance is below the existential deposit,",
                                    " it will reset the account nonce (`frame_system::AccountNonce`).",
                                    "",
                                    " The dispatch origin for this call is `root`.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments.",
                                    " - Contains a limited number of reads and writes.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_transfer",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "source",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "dest",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<T::Balance>",
                                    },
                                ],
                                documentation: [
                                    " Exactly as `transfer`, except the origin must be root and the source account may be",
                                    " specified.",
                                ],
                            },
                            FunctionMetadata {
                                name: "transfer_keep_alive",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "dest",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<T::Balance>",
                                    },
                                ],
                                documentation: [
                                    " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                                    " origin account.",
                                    "",
                                    " 99% of the time you want [`transfer`] instead.",
                                    "",
                                    " [`transfer`]: struct.Module.html#method.transfer",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewAccount",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " A new account was created.",
                                ],
                            },
                            EventMetadata {
                                name: "ReapedAccount",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " An account was reaped.",
                                ],
                            },
                            EventMetadata {
                                name: "Transfer",
                                arguments: [
                                    "AccountId",
                                    "AccountId",
                                    "Balance",
                                    "Balance",
                                ],
                                documentation: [
                                    " Transfer succeeded (from, to, value, fees).",
                                ],
                            },
                            EventMetadata {
                                name: "BalanceSet",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                    "Balance",
                                ],
                                documentation: [
                                    " A balance was set by root (who, free, reserved).",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "ExistentialDeposit",
                            ty: "T::Balance",
                            value: [
                                0,
                                228,
                                11,
                                84,
                                2,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The minimum amount required to keep an account open.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "TransferFee",
                            ty: "T::Balance",
                            value: [
                                0,
                                225,
                                245,
                                5,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The fee required to make a transfer.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "CreationFee",
                            ty: "T::Balance",
                            value: [
                                0,
                                225,
                                245,
                                5,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The fee required to create an account.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "TransactionPayment",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Balances",
                            entries: [
                                StorageEntryMetadata {
                                    name: "NextFeeMultiplier",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Multiplier",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [],
                                },
                            ],
                        },
                    ),
                    calls: None,
                    event: None,
                    constants: [
                        ModuleConstantMetadata {
                            name: "TransactionBaseFee",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                225,
                                245,
                                5,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The fee to be paid for making a transaction; the base.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "TransactionByteFee",
                            ty: "BalanceOf<T>",
                            value: [
                                64,
                                66,
                                15,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The fee to be paid for making a transaction; the per-byte portion.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Authorship",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Authorship",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Uncles",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<UncleEntryItem<T::BlockNumber, T::Hash, T::AccountId>>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Uncles",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Author",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "T::AccountId",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Author of current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DidSetUncles",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "bool",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Whether uncles were already set in this block.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_uncles",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new_uncles",
                                        ty: "Vec<T::Header>",
                                    },
                                ],
                                documentation: [
                                    " Provide a set of uncles.",
                                ],
                            },
                        ],
                    ),
                    event: None,
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Staking",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Staking",
                            entries: [
                                StorageEntryMetadata {
                                    name: "ValidatorCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The ideal number of staking participants.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "MinimumValidatorCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        4,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Minimum number of staking participants before emergency conditions are imposed.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Invulnerables",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Any validators that may never be slashed or forcibly kicked. It\'s a Vec since they\'re",
                                        " easy to initialize and the performance hit is minimal (we expect no more than four",
                                        " invulnerables) and restricted to testnets.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Bonded",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "T::AccountId",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Map from all locked \"stash\" accounts to the controller account.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Ledger",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "StakingLedger<T::AccountId, BalanceOf<T>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Map from all (unlocked) \"controller\" accounts to the info regarding the staking.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Payee",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "RewardDestination",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Where the reward payment should be made. Keyed by stash.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Validators",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "ValidatorPrefs",
                                        is_linked: true,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The map from (wannabe) validator stash key to the preferences of that validator.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Nominators",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "Nominations<T::AccountId>",
                                        is_linked: true,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The map from nominator stash key to the set of stash keys of all validators to nominate.",
                                        "",
                                        " NOTE: is private so that we can ensure upgraded before all typical accesses.",
                                        " Direct storage APIs can still bypass this protection.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Stakers",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "Exposure<T::AccountId, BalanceOf<T>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Nominators for a particular account that is in action right now. You can\'t iterate",
                                        " through validators here, but you can find them in the Session module.",
                                        "",
                                        " This is keyed by the stash account.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentElected",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The currently elected validator set keyed by stash account ID.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentEra",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "EraIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The current era index.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentEraStart",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "MomentOf<T>",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The start of the current era.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentEraStartSessionIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "SessionIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The session index at which the current era started.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentEraPointsEarned",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "EraPoints",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Rewards for the current era. Using indices of current elected set.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SlotStake",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "BalanceOf<T>",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The amount of balance actively at stake for each validator slot, currently.",
                                        "",
                                        " This is used to derive rewards and punishments.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ForceEra",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Forcing",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " True if the next session change will be a new era regardless of index.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SlashRewardFraction",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Perbill",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The percentage of the slash that is distributed to reporters.",
                                        "",
                                        " The rest of the slashed value is handled by the `Slash`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CanceledSlashPayout",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "BalanceOf<T>",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The amount of currency given to reporters of a slash event which was",
                                        " canceled by extraordinary circumstances (e.g. governance).",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "UnappliedSlashes",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "EraIndex",
                                        value: "Vec<UnappliedSlash<T::AccountId, BalanceOf<T>>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " All unapplied slashes that are queued for later.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "BondedEras",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(EraIndex, SessionIndex)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " A mapping from still-bonded eras to the first session index of that era.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ValidatorSlashInEra",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "EraIndex",
                                        key2: "T::AccountId",
                                        value: "(Perbill, BalanceOf<T>)",
                                        key2_hasher: StorageHasher::Twox128,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " All slashing events on validators, mapped by era to the highest slash proportion",
                                        " and slash value of the era.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NominatorSlashInEra",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "EraIndex",
                                        key2: "T::AccountId",
                                        value: "BalanceOf<T>",
                                        key2_hasher: StorageHasher::Twox128,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " All slashing events on nominators, mapped by era to the highest slash value of the era.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SlashingSpans",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "slashing::SlashingSpans",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Slashing spans for stash accounts.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SpanSlash",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "(T::AccountId, slashing::SpanIndex)",
                                        value: "slashing::SpanRecord<BalanceOf<T>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Records information about the maximum slash of a stash within a slashing span,",
                                        " as well as how much reward has been paid out.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "EarliestUnappliedSlash",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "EraIndex",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The earliest era for which we have a pending, unapplied slash.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "StorageVersion",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The version of storage for upgrade.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "bond",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "controller",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "payee",
                                        ty: "RewardDestination",
                                    },
                                ],
                                documentation: [
                                    " Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                                    " be the account that controls it.",
                                    "",
                                    " `value` must be more than the `minimum_balance` specified by `T::Currency`.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the stash account.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Moderate complexity.",
                                    " - O(1).",
                                    " - Three extra DB entries.",
                                    "",
                                    " NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned unless",
                                    " the `origin` falls below _existential deposit_ and gets removed as dust.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "bond_extra",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "max_additional",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                                    " for staking.",
                                    "",
                                    " Use this if there are additional funds in your stash account that you wish to bond.",
                                    " Unlike [`bond`] or [`unbond`] this function does not impose any limitation on the amount",
                                    " that can be added.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Insignificant complexity.",
                                    " - O(1).",
                                    " - One DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "unbond",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                                    " period ends. If this leaves an amount actively bonded less than",
                                    " T::Currency::minimum_balance(), then it is increased to the full amount.",
                                    "",
                                    " Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                                    " the funds out of management ready for transfer.",
                                    "",
                                    " No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                                    " can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
                                    " to be called first to remove some of the chunks (if possible).",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " See also [`Call::withdraw_unbonded`].",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Limited but potentially exploitable complexity.",
                                    " - Contains a limited number of reads.",
                                    " - Each call (requires the remainder of the bonded balance to be above `minimum_balance`)",
                                    "   will cause a new entry to be inserted into a vector (`Ledger.unlocking`) kept in storage.",
                                    "   The only way to clean the aforementioned storage item is also user-controlled via `withdraw_unbonded`.",
                                    " - One DB entry.",
                                    " </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "withdraw_unbonded",
                                arguments: [],
                                documentation: [
                                    " Remove any unlocked chunks from the `unlocking` queue from our management.",
                                    "",
                                    " This essentially frees up that balance to be used by the stash account to do",
                                    " whatever it wants.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " See also [`Call::unbond`].",
                                    "",
                                    " # <weight>",
                                    " - Could be dependent on the `origin` argument and how much `unlocking` chunks exist.",
                                    "  It implies `consolidate_unlocked` which loops over `Ledger.unlocking`, which is",
                                    "  indirectly user-controlled. See [`unbond`] for more detail.",
                                    " - Contains a limited number of reads, yet the size of which could be large based on `ledger`.",
                                    " - Writes are limited to the `origin` account key.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "validate",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "prefs",
                                        ty: "ValidatorPrefs",
                                    },
                                ],
                                documentation: [
                                    " Declare the desire to validate for the origin controller.",
                                    "",
                                    " Effects will be felt at the beginning of the next era.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Insignificant complexity.",
                                    " - Contains a limited number of reads.",
                                    " - Writes are limited to the `origin` account key.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "nominate",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "targets",
                                        ty: "Vec<<T::Lookup as StaticLookup>::Source>",
                                    },
                                ],
                                documentation: [
                                    " Declare the desire to nominate `targets` for the origin controller.",
                                    "",
                                    " Effects will be felt at the beginning of the next era.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " # <weight>",
                                    " - The transaction\'s complexity is proportional to the size of `targets`,",
                                    " which is capped at `MAX_NOMINATIONS`.",
                                    " - Both the reads and writes follow a similar pattern.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "chill",
                                arguments: [],
                                documentation: [
                                    " Declare no desire to either validate or nominate.",
                                    "",
                                    " Effects will be felt at the beginning of the next era.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Insignificant complexity.",
                                    " - Contains one read.",
                                    " - Writes are limited to the `origin` account key.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_payee",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "payee",
                                        ty: "RewardDestination",
                                    },
                                ],
                                documentation: [
                                    " (Re-)set the payment target for a controller.",
                                    "",
                                    " Effects will be felt at the beginning of the next era.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Insignificant complexity.",
                                    " - Contains a limited number of reads.",
                                    " - Writes are limited to the `origin` account key.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_controller",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "controller",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " (Re-)set the controller of a stash.",
                                    "",
                                    " Effects will be felt at the beginning of the next era.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Insignificant complexity.",
                                    " - Contains a limited number of reads.",
                                    " - Writes are limited to the `origin` account key.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_validator_count",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new",
                                        ty: "Compact<u32>",
                                    },
                                ],
                                documentation: [
                                    " The ideal number of validators.",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_no_eras",
                                arguments: [],
                                documentation: [
                                    " Force there to be no new eras indefinitely.",
                                    "",
                                    " # <weight>",
                                    " - No arguments.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_new_era",
                                arguments: [],
                                documentation: [
                                    " Force there to be a new era at the end of the next session. After this, it will be",
                                    " reset to normal (non-forced) behaviour.",
                                    "",
                                    " # <weight>",
                                    " - No arguments.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_invulnerables",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "validators",
                                        ty: "Vec<T::AccountId>",
                                    },
                                ],
                                documentation: [
                                    " Set the validators who cannot be slashed (if any).",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_unstake",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "stash",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Force a current staker to become completely unstaked, immediately.",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_new_era_always",
                                arguments: [],
                                documentation: [
                                    " Force there to be a new era at the end of sessions indefinitely.",
                                    "",
                                    " # <weight>",
                                    " - One storage write",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "cancel_deferred_slash",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "era",
                                        ty: "EraIndex",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "slash_indices",
                                        ty: "Vec<u32>",
                                    },
                                ],
                                documentation: [
                                    " Cancel enactment of a deferred slash. Can be called by either the root origin or",
                                    " the `T::SlashCancelOrigin`.",
                                    " passing the era and indices of the slashes for that era to kill.",
                                    "",
                                    " # <weight>",
                                    " - One storage write.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Reward",
                                arguments: [
                                    "Balance",
                                    "Balance",
                                ],
                                documentation: [
                                    " All validators have been rewarded by the first balance; the second is the remainder",
                                    " from the maximum amount of reward.",
                                ],
                            },
                            EventMetadata {
                                name: "Slash",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " One validator (and its nominators) has been slashed by the given amount.",
                                ],
                            },
                            EventMetadata {
                                name: "OldSlashingReportDiscarded",
                                arguments: [
                                    "SessionIndex",
                                ],
                                documentation: [
                                    " An old slashing report from a prior era was discarded because it could",
                                    " not be processed.",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "SessionsPerEra",
                            ty: "SessionIndex",
                            value: [
                                6,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " Number of sessions per era.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "BondingDuration",
                            ty: "EraIndex",
                            value: [
                                28,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " Number of eras that staked funds must remain bonded for.",
                            ],
                        },
                    ],
                    errors: [
                        ErrorMetadata {
                            name: "NotController",
                            documentation: [
                                " Not a controller account.",
                            ],
                        },
                        ErrorMetadata {
                            name: "NotStash",
                            documentation: [
                                " Not a stash account.",
                            ],
                        },
                        ErrorMetadata {
                            name: "AlreadyBonded",
                            documentation: [
                                " Stash is already bonded.",
                            ],
                        },
                        ErrorMetadata {
                            name: "AlreadyPaired",
                            documentation: [
                                " Controller is already paired.",
                            ],
                        },
                        ErrorMetadata {
                            name: "BadOrigin",
                            documentation: [
                                " Should be the root origin or the `T::SlashCancelOrigin`.",
                            ],
                        },
                        ErrorMetadata {
                            name: "EmptyTargets",
                            documentation: [
                                " Targets cannot be empty.",
                            ],
                        },
                        ErrorMetadata {
                            name: "DuplicateIndex",
                            documentation: [
                                " Duplicate index.",
                            ],
                        },
                        ErrorMetadata {
                            name: "InvalidSlashIndex",
                            documentation: [
                                " Slash record index out of bounds.",
                            ],
                        },
                        ErrorMetadata {
                            name: "InsufficientValue",
                            documentation: [
                                " Can not bond with value less than minimum balance.",
                            ],
                        },
                        ErrorMetadata {
                            name: "NoMoreChunks",
                            documentation: [
                                " Can not schedule more unlock chunks.",
                            ],
                        },
                    ],
                },
                ModuleMetadata {
                    name: "Offences",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Offences",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Reports",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ReportIdOf<T>",
                                        value: "OffenceDetails<T::AccountId, T::IdentificationTuple>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The primary structure that holds all offence records keyed by report identifiers.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ConcurrentReportsIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "Kind",
                                        key2: "OpaqueTimeSlot",
                                        value: "Vec<ReportIdOf<T>>",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " A vector of reports of the same kind that happened at the same time slot.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReportsByKindIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "Kind",
                                        value: "Vec<u8>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Enumerates all reports of a kind along with the time they happened.",
                                        "",
                                        " All reports are sorted by the time of offence.",
                                        "",
                                        " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                                        " different types are not supported at the moment so we are doing the manual serialization.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Offence",
                                arguments: [
                                    "Kind",
                                    "OpaqueTimeSlot",
                                ],
                                documentation: [
                                    " There is an offence reported of the given `kind` happened at the `session_index` and",
                                    " (kind-specific) time slot. This event is not deposited for duplicate slashes.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Session",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Session",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Validators",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::ValidatorId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current set of validators.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "SessionIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Current index of the session.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "QueuedChanged",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "bool",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " True if the underlying economic identities or weighting behind the validators",
                                        " has changed in the queued validator set.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "QueuedKeys",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(T::ValidatorId, T::Keys)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The queued keys for the next session. When the next session begins, these keys",
                                        " will be used to determine the validator\'s session keys.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DisabledValidators",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<u32>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Indices of disabled validators.",
                                        "",
                                        " The set is cleared when `on_session_ending` returns a new set of identities.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NextKeys",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Twox64Concat,
                                        key1: "Vec<u8>",
                                        key2: "T::ValidatorId",
                                        value: "T::Keys",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The next session keys for a validator.",
                                        "",
                                        " The first key is always `DEDUP_KEY_PREFIX` to have all the data in the same branch of",
                                        " the trie. Having all data in the same branch should prevent slowing down other queries.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "KeyOwner",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Twox64Concat,
                                        key1: "Vec<u8>",
                                        key2: "(KeyTypeId, Vec<u8>)",
                                        value: "T::ValidatorId",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The owner of a key. The second key is the `KeyTypeId` + the encoded key.",
                                        "",
                                        " The first key is always `DEDUP_KEY_PREFIX` to have all the data in the same branch of",
                                        " the trie. Having all data in the same branch should prevent slowing down other queries.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_keys",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "keys",
                                        ty: "T::Keys",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "proof",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Sets the session key(s) of the function caller to `key`.",
                                    " Allows an account to set its session key prior to becoming a validator.",
                                    " This doesn\'t take effect until the next session.",
                                    "",
                                    " The dispatch origin of this function must be signed.",
                                    "",
                                    " # <weight>",
                                    " - O(log n) in number of accounts.",
                                    " - One extra DB entry.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewSession",
                                arguments: [
                                    "SessionIndex",
                                ],
                                documentation: [
                                    " New session has happened. Note that the argument is the session index, not the block",
                                    " number as the type might suggest.",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "DEDUP_KEY_PREFIX",
                            ty: "&[u8]",
                            value: [
                                52,
                                58,
                                115,
                                101,
                                115,
                                115,
                                105,
                                111,
                                110,
                                58,
                                107,
                                101,
                                121,
                                115,
                            ],
                            documentation: [
                                " Used as first key for `NextKeys` and `KeyOwner` to put all the data into the same branch",
                                " of the trie.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "FinalityTracker",
                    storage: None,
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "final_hint",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "hint",
                                        ty: "Compact<T::BlockNumber>",
                                    },
                                ],
                                documentation: [
                                    " Hint that the author of this block thinks the best finalized",
                                    " block is the given number.",
                                ],
                            },
                        ],
                    ),
                    event: None,
                    constants: [
                        ModuleConstantMetadata {
                            name: "WindowSize",
                            ty: "T::BlockNumber",
                            value: [
                                101,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The number of recent samples to keep from this chain. Default is 101.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "ReportLatency",
                            ty: "T::BlockNumber",
                            value: [
                                232,
                                3,
                                0,
                                0,
                            ],
                            documentation: [
                                " The delay after which point things become suspicious. Default is 1000.",
                            ],
                        },
                    ],
                    errors: [
                        ErrorMetadata {
                            name: "AlreadyUpdated",
                            documentation: [
                                " Final hint must be updated only once in the block",
                            ],
                        },
                        ErrorMetadata {
                            name: "BadHint",
                            documentation: [
                                " Finalized height above block number",
                            ],
                        },
                    ],
                },
                ModuleMetadata {
                    name: "Grandpa",
                    storage: Some(
                        StorageMetadata {
                            prefix: "GrandpaFinality",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Authorities",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "AuthorityList",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " DEPRECATED",
                                        "",
                                        " This used to store the current authority set, which has been migrated to the well-known",
                                        " GRANDPA_AUTHORITES_KEY unhashed key.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "State",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "StoredState<T::BlockNumber>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " State of the current authority set.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "PendingChange",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "StoredPendingChange<T::BlockNumber>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Pending change: (signaled at, scheduled change).",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NextForced",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "T::BlockNumber",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " next block number where we can force a change.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Stalled",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "(T::BlockNumber, T::BlockNumber)",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " `true` if we are currently stalled.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentSetId",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "SetId",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The number of changes (both in terms of keys and underlying economic responsibilities)",
                                        " in the \"set\" of Grandpa validators from genesis.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SetIdSession",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "SetId",
                                        value: "SessionIndex",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " A mapping from grandpa set ID to the index of the *most recent* session for which its members were responsible.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "report_misbehavior",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "_report",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Report some misbehavior.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewAuthorities",
                                arguments: [
                                    "AuthorityList",
                                ],
                                documentation: [
                                    " New authority set has been applied.",
                                ],
                            },
                            EventMetadata {
                                name: "Paused",
                                arguments: [],
                                documentation: [
                                    " Current authority set has been paused.",
                                ],
                            },
                            EventMetadata {
                                name: "Resumed",
                                arguments: [],
                                documentation: [
                                    " Current authority set has been resumed.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [
                        ErrorMetadata {
                            name: "PauseFailed",
                            documentation: [
                                " Attempt to signal GRANDPA pause when the authority set isn\'t live",
                                " (either paused or already pending pause).",
                            ],
                        },
                        ErrorMetadata {
                            name: "ResumeFailed",
                            documentation: [
                                " Attempt to signal GRANDPA resume when the authority set isn\'t paused",
                                " (either live or already pending resume).",
                            ],
                        },
                        ErrorMetadata {
                            name: "ChangePending",
                            documentation: [
                                " Attempt to signal GRANDPA change with one already pending.",
                            ],
                        },
                        ErrorMetadata {
                            name: "TooSoon",
                            documentation: [
                                " Cannot signal forced change so soon after last.",
                            ],
                        },
                    ],
                },
                ModuleMetadata {
                    name: "ImOnline",
                    storage: Some(
                        StorageMetadata {
                            prefix: "ImOnline",
                            entries: [
                                StorageEntryMetadata {
                                    name: "GossipAt",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::BlockNumber",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The block number when we should gossip.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Keys",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AuthorityId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current set of keys that may issue a heartbeat.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReceivedHeartbeats",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "SessionIndex",
                                        key2: "AuthIndex",
                                        value: "Vec<u8>",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " For each session index, we keep a mapping of `AuthIndex`",
                                        " to `offchain::OpaqueNetworkState`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "AuthoredBlocks",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "SessionIndex",
                                        key2: "T::ValidatorId",
                                        value: "u32",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " For each session index, we keep a mapping of `T::ValidatorId` to the",
                                        " number of blocks authored by the given authority.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "heartbeat",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "heartbeat",
                                        ty: "Heartbeat<T::BlockNumber>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "_signature",
                                        ty: "<T::AuthorityId as RuntimeAppPublic>::Signature",
                                    },
                                ],
                                documentation: [],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "HeartbeatReceived",
                                arguments: [
                                    "AuthorityId",
                                ],
                                documentation: [
                                    " A new heartbeat was received from `AuthorityId`",
                                ],
                            },
                            EventMetadata {
                                name: "AllGood",
                                arguments: [],
                                documentation: [
                                    " At the end of the session, no offence was committed.",
                                ],
                            },
                            EventMetadata {
                                name: "SomeOffline",
                                arguments: [
                                    "Vec<IdentificationTuple>",
                                ],
                                documentation: [
                                    " At the end of the session, at least once validator was found to be offline.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "AuthorityDiscovery",
                    storage: None,
                    calls: Some(
                        [],
                    ),
                    event: None,
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Democracy",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Democracy",
                            entries: [
                                StorageEntryMetadata {
                                    name: "PublicPropCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "PropIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The number of (public) proposals that have been made so far.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "PublicProps",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(PropIndex, T::Hash, T::AccountId)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The public proposals. Unsorted. The second item is the proposal\'s hash.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Preimages",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "(Vec<u8>, T::AccountId, BalanceOf<T>, T::BlockNumber)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                                        " The block number is the block at which it was deposited.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DepositOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "PropIndex",
                                        value: "(BalanceOf<T>, Vec<T::AccountId>)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Those who have locked a deposit.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReferendumCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "ReferendumIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The next free referendum index, aka the number of referenda started so far.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "LowestUnbaked",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "ReferendumIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The lowest referendum index representing an unbaked referendum. Equal to",
                                        " `ReferendumCount` if there isn\'t a unbaked referendum.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReferendumInfoOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ReferendumIndex",
                                        value: "ReferendumInfo<T::BlockNumber, T::Hash>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Information concerning any given referendum.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DispatchQueue",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(T::BlockNumber, T::Hash, ReferendumIndex)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Queue of successful referenda to be dispatched. Stored ordered by block number.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "VotersFor",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ReferendumIndex",
                                        value: "Vec<T::AccountId>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Get the voters for the current proposal.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "VoteOf",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "(ReferendumIndex, T::AccountId)",
                                        value: "Vote",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Get the vote in a given referendum of a particular voter. The result is meaningful only",
                                        " if `voters_for` includes the voter when called with the referendum (you\'ll get the",
                                        " default `Vote` value otherwise). If you don\'t want to check `voters_for`, then you can",
                                        " also check for simple existence with `VoteOf::exists` first.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Proxy",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "T::AccountId",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Who is able to vote for whom. Value is the fund-holding account, key is the",
                                        " vote-transaction-sending account.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Delegations",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "(T::AccountId, Conviction)",
                                        is_linked: true,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Get the account (and lock periods) to which another account is delegating vote.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "LastTabledWasExternal",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "bool",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " True if the last referendum tabled was submitted externally. False if it was a public",
                                        " proposal.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NextExternal",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "(T::Hash, VoteThreshold)",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The referendum to be tabled whenever it would be valid to table an external proposal.",
                                        " This happens when a referendum needs to be tabled and one of two conditions are met:",
                                        " - `LastTabledWasExternal` is `false`; or",
                                        " - `PublicProps` is empty.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Blacklist",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "(T::BlockNumber, Vec<T::AccountId>)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                                        " (until when it may not be resubmitted) and who vetoed it.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Cancellations",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "bool",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Record of all proposals that have been subject to emergency cancellation.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "propose",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_hash",
                                        ty: "T::Hash",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Propose a sensitive action to be taken.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - Two DB changes, one DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "second",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Compact<PropIndex>",
                                    },
                                ],
                                documentation: [
                                    " Propose a sensitive action to be taken.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - One DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "vote",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "ref_index",
                                        ty: "Compact<ReferendumIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "vote",
                                        ty: "Vote",
                                    },
                                ],
                                documentation: [
                                    " Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                                    " otherwise it is a vote to keep the status quo.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - One DB change, one DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "proxy_vote",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "ref_index",
                                        ty: "Compact<ReferendumIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "vote",
                                        ty: "Vote",
                                    },
                                ],
                                documentation: [
                                    " Vote in a referendum on behalf of a stash. If `vote.is_aye()`, the vote is to enact",
                                    " the proposal;  otherwise it is a vote to keep the status quo.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - One DB change, one DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "emergency_cancel",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "ref_index",
                                        ty: "ReferendumIndex",
                                    },
                                ],
                                documentation: [
                                    " Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                                    " referendum.",
                                ],
                            },
                            FunctionMetadata {
                                name: "external_propose",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_hash",
                                        ty: "T::Hash",
                                    },
                                ],
                                documentation: [
                                    " Schedule a referendum to be tabled once it is legal to schedule an external",
                                    " referendum.",
                                ],
                            },
                            FunctionMetadata {
                                name: "external_propose_majority",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_hash",
                                        ty: "T::Hash",
                                    },
                                ],
                                documentation: [
                                    " Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                                    " an external referendum.",
                                    "",
                                    " Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                                    " pre-scheduled `external_propose` call.",
                                ],
                            },
                            FunctionMetadata {
                                name: "external_propose_default",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_hash",
                                        ty: "T::Hash",
                                    },
                                ],
                                documentation: [
                                    " Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                                    " schedule an external referendum.",
                                    "",
                                    " Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                                    " pre-scheduled `external_propose` call.",
                                ],
                            },
                            FunctionMetadata {
                                name: "fast_track",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_hash",
                                        ty: "T::Hash",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "voting_period",
                                        ty: "T::BlockNumber",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "delay",
                                        ty: "T::BlockNumber",
                                    },
                                ],
                                documentation: [
                                    " Schedule the currently externally-proposed majority-carries referendum to be tabled",
                                    " immediately. If there is no externally-proposed referendum currently, or if there is one",
                                    " but it is not a majority-carries referendum then it fails.",
                                    "",
                                    " - `proposal_hash`: The hash of the current external proposal.",
                                    " - `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                                    "   `EmergencyVotingPeriod` if too low.",
                                    " - `delay`: The number of block after voting has ended in approval and this should be",
                                    "   enacted. This doesn\'t have a minimum amount.",
                                ],
                            },
                            FunctionMetadata {
                                name: "veto_external",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_hash",
                                        ty: "T::Hash",
                                    },
                                ],
                                documentation: [
                                    " Veto and blacklist the external proposal hash.",
                                ],
                            },
                            FunctionMetadata {
                                name: "cancel_referendum",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "ref_index",
                                        ty: "Compact<ReferendumIndex>",
                                    },
                                ],
                                documentation: [
                                    " Remove a referendum.",
                                ],
                            },
                            FunctionMetadata {
                                name: "cancel_queued",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "which",
                                        ty: "ReferendumIndex",
                                    },
                                ],
                                documentation: [
                                    " Cancel a proposal queued for enactment.",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_proxy",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proxy",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Specify a proxy. Called by the stash.",
                                    "",
                                    " # <weight>",
                                    " - One extra DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "resign_proxy",
                                arguments: [],
                                documentation: [
                                    " Clear the proxy. Called by the proxy.",
                                    "",
                                    " # <weight>",
                                    " - One DB clear.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "remove_proxy",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proxy",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Clear the proxy. Called by the stash.",
                                    "",
                                    " # <weight>",
                                    " - One DB clear.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "delegate",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "to",
                                        ty: "T::AccountId",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "conviction",
                                        ty: "Conviction",
                                    },
                                ],
                                documentation: [
                                    " Delegate vote.",
                                    "",
                                    " # <weight>",
                                    " - One extra DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "undelegate",
                                arguments: [],
                                documentation: [
                                    " Undelegate vote.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "clear_public_proposals",
                                arguments: [],
                                documentation: [
                                    " Veto and blacklist the proposal hash. Must be from Root origin.",
                                ],
                            },
                            FunctionMetadata {
                                name: "note_preimage",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "encoded_proposal",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Register the preimage for an upcoming proposal. This doesn\'t require the proposal to be",
                                    " in the dispatch queue but does require a deposit, returned once enacted.",
                                ],
                            },
                            FunctionMetadata {
                                name: "note_imminent_preimage",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "encoded_proposal",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Register the preimage for an upcoming proposal. This requires the proposal to be",
                                    " in the dispatch queue. No deposit is needed.",
                                ],
                            },
                            FunctionMetadata {
                                name: "reap_preimage",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_hash",
                                        ty: "T::Hash",
                                    },
                                ],
                                documentation: [
                                    " Remove an expired proposal preimage and collect the deposit.",
                                    "",
                                    " This will only work after `VotingPeriod` blocks from the time that the preimage was",
                                    " noted, if it\'s the same account doing it. If it\'s a different account, then it\'ll only",
                                    " work an additional `EnactmentPeriod` later.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Proposed",
                                arguments: [
                                    "PropIndex",
                                    "Balance",
                                ],
                                documentation: [
                                    " A motion has been proposed by a public account.",
                                ],
                            },
                            EventMetadata {
                                name: "Tabled",
                                arguments: [
                                    "PropIndex",
                                    "Balance",
                                    "Vec<AccountId>",
                                ],
                                documentation: [
                                    " A public proposal has been tabled for referendum vote.",
                                ],
                            },
                            EventMetadata {
                                name: "ExternalTabled",
                                arguments: [],
                                documentation: [
                                    " An external proposal has been tabled.",
                                ],
                            },
                            EventMetadata {
                                name: "Started",
                                arguments: [
                                    "ReferendumIndex",
                                    "VoteThreshold",
                                ],
                                documentation: [
                                    " A referendum has begun.",
                                ],
                            },
                            EventMetadata {
                                name: "Passed",
                                arguments: [
                                    "ReferendumIndex",
                                ],
                                documentation: [
                                    " A proposal has been approved by referendum.",
                                ],
                            },
                            EventMetadata {
                                name: "NotPassed",
                                arguments: [
                                    "ReferendumIndex",
                                ],
                                documentation: [
                                    " A proposal has been rejected by referendum.",
                                ],
                            },
                            EventMetadata {
                                name: "Cancelled",
                                arguments: [
                                    "ReferendumIndex",
                                ],
                                documentation: [
                                    " A referendum has been cancelled.",
                                ],
                            },
                            EventMetadata {
                                name: "Executed",
                                arguments: [
                                    "ReferendumIndex",
                                    "bool",
                                ],
                                documentation: [
                                    " A proposal has been enacted.",
                                ],
                            },
                            EventMetadata {
                                name: "Delegated",
                                arguments: [
                                    "AccountId",
                                    "AccountId",
                                ],
                                documentation: [
                                    " An account has delegated their vote to another account.",
                                ],
                            },
                            EventMetadata {
                                name: "Undelegated",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " An account has cancelled a previous delegation operation.",
                                ],
                            },
                            EventMetadata {
                                name: "Vetoed",
                                arguments: [
                                    "AccountId",
                                    "Hash",
                                    "BlockNumber",
                                ],
                                documentation: [
                                    " An external proposal has been vetoed.",
                                ],
                            },
                            EventMetadata {
                                name: "PreimageNoted",
                                arguments: [
                                    "Hash",
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " A proposal\'s preimage was noted, and the deposit taken.",
                                ],
                            },
                            EventMetadata {
                                name: "PreimageUsed",
                                arguments: [
                                    "Hash",
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " A proposal preimage was removed and used (the deposit was returned).",
                                ],
                            },
                            EventMetadata {
                                name: "PreimageInvalid",
                                arguments: [
                                    "Hash",
                                    "ReferendumIndex",
                                ],
                                documentation: [
                                    " A proposal could not be executed because its preimage was invalid.",
                                ],
                            },
                            EventMetadata {
                                name: "PreimageMissing",
                                arguments: [
                                    "Hash",
                                    "ReferendumIndex",
                                ],
                                documentation: [
                                    " A proposal could not be executed because its preimage was missing.",
                                ],
                            },
                            EventMetadata {
                                name: "PreimageReaped",
                                arguments: [
                                    "Hash",
                                    "AccountId",
                                    "Balance",
                                    "AccountId",
                                ],
                                documentation: [
                                    " A registered preimage was removed and the deposit collected by the reaper (last item).",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "EnactmentPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                0,
                                194,
                                1,
                                0,
                            ],
                            documentation: [
                                " The minimum period of locking and the period between a proposal being approved and enacted.",
                                "",
                                " It should generally be a little more than the unstake period to ensure that",
                                " voting stakers have an opportunity to remove themselves from the system in the case where",
                                " they are on the losing side of a vote.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "LaunchPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                192,
                                137,
                                1,
                                0,
                            ],
                            documentation: [
                                " How often (in blocks) new public referenda are launched.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "VotingPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                192,
                                137,
                                1,
                                0,
                            ],
                            documentation: [
                                " How often (in blocks) to check for new votes.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "MinimumDeposit",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                16,
                                165,
                                212,
                                232,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The minimum amount to be used as a deposit for a public referendum proposal.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "EmergencyVotingPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                8,
                                7,
                                0,
                                0,
                            ],
                            documentation: [
                                " Minimum voting period allowed for an emergency referendum.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "CooloffPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                192,
                                137,
                                1,
                                0,
                            ],
                            documentation: [
                                " Period in blocks where an external proposal may not be re-submitted after being vetoed.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "PreimageByteDeposit",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                225,
                                245,
                                5,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The amount of balance that must be deposited per byte of preimage stored.",
                            ],
                        },
                    ],
                    errors: [
                        ErrorMetadata {
                            name: "ValueLow",
                            documentation: [
                                " Value too low",
                            ],
                        },
                        ErrorMetadata {
                            name: "ProposalMissing",
                            documentation: [
                                " Proposal does not exist",
                            ],
                        },
                        ErrorMetadata {
                            name: "NotProxy",
                            documentation: [
                                " Not a proxy",
                            ],
                        },
                        ErrorMetadata {
                            name: "BadIndex",
                            documentation: [
                                " Unknown index",
                            ],
                        },
                        ErrorMetadata {
                            name: "AlreadyCanceled",
                            documentation: [
                                " Cannot cancel the same proposal twice",
                            ],
                        },
                        ErrorMetadata {
                            name: "DuplicateProposal",
                            documentation: [
                                " Proposal already made",
                            ],
                        },
                        ErrorMetadata {
                            name: "ProposalBlacklisted",
                            documentation: [
                                " Proposal still blacklisted",
                            ],
                        },
                        ErrorMetadata {
                            name: "NotSimpleMajority",
                            documentation: [
                                " Next external proposal not simple majority",
                            ],
                        },
                        ErrorMetadata {
                            name: "InvalidHash",
                            documentation: [
                                " Invalid hash",
                            ],
                        },
                        ErrorMetadata {
                            name: "NoProposal",
                            documentation: [
                                " No external proposal",
                            ],
                        },
                        ErrorMetadata {
                            name: "AlreadyVetoed",
                            documentation: [
                                " Identity may not veto a proposal twice",
                            ],
                        },
                        ErrorMetadata {
                            name: "AlreadyProxy",
                            documentation: [
                                " Already a proxy",
                            ],
                        },
                        ErrorMetadata {
                            name: "WrongProxy",
                            documentation: [
                                " Wrong proxy",
                            ],
                        },
                        ErrorMetadata {
                            name: "NotDelegated",
                            documentation: [
                                " Not delegated",
                            ],
                        },
                        ErrorMetadata {
                            name: "DuplicatePreimage",
                            documentation: [
                                " Preimage already noted",
                            ],
                        },
                        ErrorMetadata {
                            name: "NotImminent",
                            documentation: [
                                " Not imminent",
                            ],
                        },
                        ErrorMetadata {
                            name: "Early",
                            documentation: [
                                " Too early",
                            ],
                        },
                        ErrorMetadata {
                            name: "Imminent",
                            documentation: [
                                " Imminent",
                            ],
                        },
                        ErrorMetadata {
                            name: "PreimageMissing",
                            documentation: [
                                " Preimage not found",
                            ],
                        },
                        ErrorMetadata {
                            name: "ReferendumInvalid",
                            documentation: [
                                " Vote given for invalid referendum",
                            ],
                        },
                        ErrorMetadata {
                            name: "PreimageInvalid",
                            documentation: [
                                " Invalid preimage",
                            ],
                        },
                        ErrorMetadata {
                            name: "NoneWaiting",
                            documentation: [
                                " No proposals waiting",
                            ],
                        },
                    ],
                },
                ModuleMetadata {
                    name: "Council",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Instance1Collective",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Proposals",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::Hash>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The hashes of the active proposals.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ProposalOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "<T as Trait<I>>::Proposal",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Actual proposal for a given hash, if it\'s current.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Voting",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "Votes<T::AccountId>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Votes on a given proposal, if it is ongoing.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ProposalCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Proposals so far.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Members",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current members of the collective. This is stored sorted (just by value).",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_members",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new_members",
                                        ty: "Vec<T::AccountId>",
                                    },
                                ],
                                documentation: [
                                    " Set the collective\'s membership manually to `new_members`. Be nice to the chain and",
                                    " provide it pre-sorted.",
                                    "",
                                    " Requires root origin.",
                                ],
                            },
                            FunctionMetadata {
                                name: "execute",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<<T as Trait<I>>::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " Dispatch a proposal from a member using the `Member` origin.",
                                    "",
                                    " Origin must be a member of the collective.",
                                ],
                            },
                            FunctionMetadata {
                                name: "propose",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "threshold",
                                        ty: "Compact<MemberCount>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<<T as Trait<I>>::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " # <weight>",
                                    " - Bounded storage reads and writes.",
                                    " - Argument `threshold` has bearing on weight.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "vote",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "T::Hash",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "index",
                                        ty: "Compact<ProposalIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "approve",
                                        ty: "bool",
                                    },
                                ],
                                documentation: [
                                    " # <weight>",
                                    " - Bounded storage read and writes.",
                                    " - Will be slightly heavier if the proposal is approved / disapproved after the vote.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Proposed",
                                arguments: [
                                    "AccountId",
                                    "ProposalIndex",
                                    "Hash",
                                    "MemberCount",
                                ],
                                documentation: [
                                    " A motion (given hash) has been proposed (by given account) with a threshold (given",
                                    " `MemberCount`).",
                                ],
                            },
                            EventMetadata {
                                name: "Voted",
                                arguments: [
                                    "AccountId",
                                    "Hash",
                                    "bool",
                                    "MemberCount",
                                    "MemberCount",
                                ],
                                documentation: [
                                    " A motion (given hash) has been voted on by given account, leaving",
                                    " a tally (yes votes and no votes given respectively as `MemberCount`).",
                                ],
                            },
                            EventMetadata {
                                name: "Approved",
                                arguments: [
                                    "Hash",
                                ],
                                documentation: [
                                    " A motion was approved by the required threshold.",
                                ],
                            },
                            EventMetadata {
                                name: "Disapproved",
                                arguments: [
                                    "Hash",
                                ],
                                documentation: [
                                    " A motion was not approved by the required threshold.",
                                ],
                            },
                            EventMetadata {
                                name: "Executed",
                                arguments: [
                                    "Hash",
                                    "bool",
                                ],
                                documentation: [
                                    " A motion was executed; `bool` is true if returned without error.",
                                ],
                            },
                            EventMetadata {
                                name: "MemberExecuted",
                                arguments: [
                                    "Hash",
                                    "bool",
                                ],
                                documentation: [
                                    " A single member did some action; `bool` is true if returned without error.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [
                        ErrorMetadata {
                            name: "NotMember",
                            documentation: [
                                " Account is not a member",
                            ],
                        },
                        ErrorMetadata {
                            name: "DuplicateProposal",
                            documentation: [
                                " Duplicate proposals not allowed",
                            ],
                        },
                        ErrorMetadata {
                            name: "ProposalMissing",
                            documentation: [
                                " Proposal must exist",
                            ],
                        },
                        ErrorMetadata {
                            name: "WrongIndex",
                            documentation: [
                                " Mismatched index",
                            ],
                        },
                        ErrorMetadata {
                            name: "DuplicateVote",
                            documentation: [
                                " Duplicate vote ignored",
                            ],
                        },
                        ErrorMetadata {
                            name: "AlreadyInitialized",
                            documentation: [
                                " Members are already initialized!",
                            ],
                        },
                    ],
                },
                ModuleMetadata {
                    name: "TechnicalCommittee",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Instance2Collective",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Proposals",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::Hash>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The hashes of the active proposals.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ProposalOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "<T as Trait<I>>::Proposal",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Actual proposal for a given hash, if it\'s current.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Voting",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "Votes<T::AccountId>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Votes on a given proposal, if it is ongoing.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ProposalCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Proposals so far.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Members",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current members of the collective. This is stored sorted (just by value).",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_members",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new_members",
                                        ty: "Vec<T::AccountId>",
                                    },
                                ],
                                documentation: [
                                    " Set the collective\'s membership manually to `new_members`. Be nice to the chain and",
                                    " provide it pre-sorted.",
                                    "",
                                    " Requires root origin.",
                                ],
                            },
                            FunctionMetadata {
                                name: "execute",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<<T as Trait<I>>::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " Dispatch a proposal from a member using the `Member` origin.",
                                    "",
                                    " Origin must be a member of the collective.",
                                ],
                            },
                            FunctionMetadata {
                                name: "propose",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "threshold",
                                        ty: "Compact<MemberCount>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<<T as Trait<I>>::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " # <weight>",
                                    " - Bounded storage reads and writes.",
                                    " - Argument `threshold` has bearing on weight.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "vote",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "T::Hash",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "index",
                                        ty: "Compact<ProposalIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "approve",
                                        ty: "bool",
                                    },
                                ],
                                documentation: [
                                    " # <weight>",
                                    " - Bounded storage read and writes.",
                                    " - Will be slightly heavier if the proposal is approved / disapproved after the vote.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Proposed",
                                arguments: [
                                    "AccountId",
                                    "ProposalIndex",
                                    "Hash",
                                    "MemberCount",
                                ],
                                documentation: [
                                    " A motion (given hash) has been proposed (by given account) with a threshold (given",
                                    " `MemberCount`).",
                                ],
                            },
                            EventMetadata {
                                name: "Voted",
                                arguments: [
                                    "AccountId",
                                    "Hash",
                                    "bool",
                                    "MemberCount",
                                    "MemberCount",
                                ],
                                documentation: [
                                    " A motion (given hash) has been voted on by given account, leaving",
                                    " a tally (yes votes and no votes given respectively as `MemberCount`).",
                                ],
                            },
                            EventMetadata {
                                name: "Approved",
                                arguments: [
                                    "Hash",
                                ],
                                documentation: [
                                    " A motion was approved by the required threshold.",
                                ],
                            },
                            EventMetadata {
                                name: "Disapproved",
                                arguments: [
                                    "Hash",
                                ],
                                documentation: [
                                    " A motion was not approved by the required threshold.",
                                ],
                            },
                            EventMetadata {
                                name: "Executed",
                                arguments: [
                                    "Hash",
                                    "bool",
                                ],
                                documentation: [
                                    " A motion was executed; `bool` is true if returned without error.",
                                ],
                            },
                            EventMetadata {
                                name: "MemberExecuted",
                                arguments: [
                                    "Hash",
                                    "bool",
                                ],
                                documentation: [
                                    " A single member did some action; `bool` is true if returned without error.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [
                        ErrorMetadata {
                            name: "NotMember",
                            documentation: [
                                " Account is not a member",
                            ],
                        },
                        ErrorMetadata {
                            name: "DuplicateProposal",
                            documentation: [
                                " Duplicate proposals not allowed",
                            ],
                        },
                        ErrorMetadata {
                            name: "ProposalMissing",
                            documentation: [
                                " Proposal must exist",
                            ],
                        },
                        ErrorMetadata {
                            name: "WrongIndex",
                            documentation: [
                                " Mismatched index",
                            ],
                        },
                        ErrorMetadata {
                            name: "DuplicateVote",
                            documentation: [
                                " Duplicate vote ignored",
                            ],
                        },
                        ErrorMetadata {
                            name: "AlreadyInitialized",
                            documentation: [
                                " Members are already initialized!",
                            ],
                        },
                    ],
                },
                ModuleMetadata {
                    name: "ElectionsPhragmen",
                    storage: Some(
                        StorageMetadata {
                            prefix: "PhragmenElection",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Members",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(T::AccountId, BalanceOf<T>)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current elected membership. Sorted based on account id.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "RunnersUp",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(T::AccountId, BalanceOf<T>)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current runners_up. Sorted based on low to high merit (worse to best runner).",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ElectionRounds",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The total number of vote rounds that have happened, excluding the upcoming one.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "VotesOf",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "Vec<T::AccountId>",
                                        is_linked: true,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Votes of a particular voter, with the round index of the votes.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "StakeOf",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "BalanceOf<T>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Locked stake of a voter.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Candidates",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The present candidate list. Sorted based on account id. A current member can never enter",
                                        " this vector and is always implicitly assumed to be a candidate.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "vote",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "votes",
                                        ty: "Vec<T::AccountId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Vote for a set of candidates for the upcoming round of election.",
                                    "",
                                    " The `votes` should:",
                                    "   - not be empty.",
                                    "   - be less than the number of candidates.",
                                    "",
                                    " Upon voting, `value` units of `who`\'s balance is locked and a bond amount is reserved.",
                                    " It is the responsibility of the caller to not place all of their balance into the lock",
                                    " and keep some for further transactions.",
                                    "",
                                    " # <weight>",
                                    " #### State",
                                    " Reads: O(1)",
                                    " Writes: O(V) given `V` votes. V is bounded by 16.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "remove_voter",
                                arguments: [],
                                documentation: [
                                    " Remove `origin` as a voter. This removes the lock and returns the bond.",
                                    "",
                                    " # <weight>",
                                    " #### State",
                                    " Reads: O(1)",
                                    " Writes: O(1)",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "report_defunct_voter",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "target",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Report `target` for being an defunct voter. In case of a valid report, the reporter is",
                                    " rewarded by the bond amount of `target`. Otherwise, the reporter itself is removed and",
                                    " their bond is slashed.",
                                    "",
                                    " A defunct voter is defined to be:",
                                    "   - a voter whose current submitted votes are all invalid. i.e. all of them are no",
                                    "     longer a candidate nor an active member.",
                                    "",
                                    " # <weight>",
                                    " #### State",
                                    " Reads: O(NLogM) given M current candidates and N votes for `target`.",
                                    " Writes: O(1)",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "submit_candidacy",
                                arguments: [],
                                documentation: [
                                    " Submit oneself for candidacy.",
                                    "",
                                    " A candidate will either:",
                                    "   - Lose at the end of the term and forfeit their deposit.",
                                    "   - Win and become a member. Members will eventually get their stash back.",
                                    "   - Become a runner-up. Runners-ups are reserved members in case one gets forcefully",
                                    "     removed.",
                                    "",
                                    " # <weight>",
                                    " #### State",
                                    " Reads: O(LogN) Given N candidates.",
                                    " Writes: O(1)",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "renounce_candidacy",
                                arguments: [],
                                documentation: [
                                    " Renounce one\'s intention to be a candidate for the next election round. 3 potential",
                                    " outcomes exist:",
                                    " - `origin` is a candidate and not elected in any set. In this case, the bond is",
                                    "   unreserved, returned and origin is removed as a candidate.",
                                    " - `origin` is a current runner up. In this case, the bond is unreserved, returned and",
                                    "   origin is removed as a runner.",
                                    " - `origin` is a current member. In this case, the bond is unreserved and origin is",
                                    "   removed as a member, consequently not being a candidate for the next round anymore.",
                                    "   Similar to [`remove_voter`], if replacement runners exists, they are immediately used.",
                                ],
                            },
                            FunctionMetadata {
                                name: "remove_member",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "who",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Remove a particular member from the set. This is effective immediately and the bond of",
                                    " the outgoing member is slashed.",
                                    "",
                                    " If a runner-up is available, then the best runner-up will be removed and replaces the",
                                    " outgoing member. Otherwise, a new phragmen round is started.",
                                    "",
                                    " Note that this does not affect the designated block number of the next election.",
                                    "",
                                    " # <weight>",
                                    " #### State",
                                    " Reads: O(do_phragmen)",
                                    " Writes: O(do_phragmen)",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewTerm",
                                arguments: [
                                    "Vec<(AccountId, Balance)>",
                                ],
                                documentation: [
                                    " A new term with new members. This indicates that enough candidates existed, not that",
                                    " enough have has been elected. The inner value must be examined for this purpose.",
                                ],
                            },
                            EventMetadata {
                                name: "EmptyTerm",
                                arguments: [],
                                documentation: [
                                    " No (or not enough) candidates existed for this round.",
                                ],
                            },
                            EventMetadata {
                                name: "MemberKicked",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " A member has been removed. This should always be followed by either `NewTerm` ot",
                                    " `EmptyTerm`.",
                                ],
                            },
                            EventMetadata {
                                name: "MemberRenounced",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " A member has renounced their candidacy.",
                                ],
                            },
                            EventMetadata {
                                name: "VoterReported",
                                arguments: [
                                    "AccountId",
                                    "AccountId",
                                    "bool",
                                ],
                                documentation: [
                                    " A voter (first element) was reported (byt the second element) with the the report being",
                                    " successful or not (third element).",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "CandidacyBond",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                16,
                                165,
                                212,
                                232,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [],
                        },
                        ModuleConstantMetadata {
                            name: "VotingBond",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                116,
                                59,
                                164,
                                11,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [],
                        },
                        ModuleConstantMetadata {
                            name: "DesiredMembers",
                            ty: "u32",
                            value: [
                                13,
                                0,
                                0,
                                0,
                            ],
                            documentation: [],
                        },
                        ModuleConstantMetadata {
                            name: "DesiredRunnersUp",
                            ty: "u32",
                            value: [
                                7,
                                0,
                                0,
                                0,
                            ],
                            documentation: [],
                        },
                        ModuleConstantMetadata {
                            name: "TermDuration",
                            ty: "T::BlockNumber",
                            value: [
                                64,
                                56,
                                0,
                                0,
                            ],
                            documentation: [],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "TechnicalMembership",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Instance1Membership",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Members",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current membership, stored as an ordered Vec.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "add_member",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "who",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Add a member `who` to the set.",
                                    "",
                                    " May only be called from `AddOrigin` or root.",
                                ],
                            },
                            FunctionMetadata {
                                name: "remove_member",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "who",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Remove a member `who` from the set.",
                                    "",
                                    " May only be called from `RemoveOrigin` or root.",
                                ],
                            },
                            FunctionMetadata {
                                name: "swap_member",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "remove",
                                        ty: "T::AccountId",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "add",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Swap out one member `remove` for another `add`.",
                                    "",
                                    " May only be called from `SwapOrigin` or root.",
                                ],
                            },
                            FunctionMetadata {
                                name: "reset_members",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "members",
                                        ty: "Vec<T::AccountId>",
                                    },
                                ],
                                documentation: [
                                    " Change the membership to a new set, disregarding the existing membership. Be nice and",
                                    " pass `members` pre-sorted.",
                                    "",
                                    " May only be called from `ResetOrigin` or root.",
                                ],
                            },
                            FunctionMetadata {
                                name: "change_key",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Swap out the sending member for some other key `new`.",
                                    "",
                                    " May only be called from `Signed` origin of a current member.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "MemberAdded",
                                arguments: [],
                                documentation: [
                                    " The given member was added; see the transaction for who.",
                                ],
                            },
                            EventMetadata {
                                name: "MemberRemoved",
                                arguments: [],
                                documentation: [
                                    " The given member was removed; see the transaction for who.",
                                ],
                            },
                            EventMetadata {
                                name: "MembersSwapped",
                                arguments: [],
                                documentation: [
                                    " Two members were swapped; see the transaction for who.",
                                ],
                            },
                            EventMetadata {
                                name: "MembersReset",
                                arguments: [],
                                documentation: [
                                    " The membership was reset; see the transaction for who the new set is.",
                                ],
                            },
                            EventMetadata {
                                name: "KeyChanged",
                                arguments: [],
                                documentation: [
                                    " One of the members\' keys changed.",
                                ],
                            },
                            EventMetadata {
                                name: "Dummy",
                                arguments: [
                                    "sp_std::marker::PhantomData<(AccountId, Event)>",
                                ],
                                documentation: [
                                    " Phantom member, never used.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Treasury",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Treasury",
                            entries: [
                                StorageEntryMetadata {
                                    name: "ProposalCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "ProposalIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Number of proposals that have been made.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Proposals",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ProposalIndex",
                                        value: "Proposal<T::AccountId, BalanceOf<T>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Proposals that have been made.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Approvals",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ProposalIndex>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Proposal indices that have been approved but not yet awarded.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "propose_spend",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "beneficiary",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Put forward a suggestion for spending. A deposit proportional to the value",
                                    " is reserved and slashed if the proposal is rejected. It is returned once the",
                                    " proposal is awarded.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - Limited storage reads.",
                                    " - One DB change, one extra DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "reject_proposal",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_id",
                                        ty: "Compact<ProposalIndex>",
                                    },
                                ],
                                documentation: [
                                    " Reject a proposed spend. The original deposit will be slashed.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - Limited storage reads.",
                                    " - One DB clear.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "approve_proposal",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_id",
                                        ty: "Compact<ProposalIndex>",
                                    },
                                ],
                                documentation: [
                                    " Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                                    " and the original deposit will be returned.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - Limited storage reads.",
                                    " - One DB change.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Proposed",
                                arguments: [
                                    "ProposalIndex",
                                ],
                                documentation: [
                                    " New proposal.",
                                ],
                            },
                            EventMetadata {
                                name: "Spending",
                                arguments: [
                                    "Balance",
                                ],
                                documentation: [
                                    " We have ended a spend period and will now allocate funds.",
                                ],
                            },
                            EventMetadata {
                                name: "Awarded",
                                arguments: [
                                    "ProposalIndex",
                                    "Balance",
                                    "AccountId",
                                ],
                                documentation: [
                                    " Some funds have been allocated.",
                                ],
                            },
                            EventMetadata {
                                name: "Burnt",
                                arguments: [
                                    "Balance",
                                ],
                                documentation: [
                                    " Some of our funds have been burnt.",
                                ],
                            },
                            EventMetadata {
                                name: "Rollover",
                                arguments: [
                                    "Balance",
                                ],
                                documentation: [
                                    " Spending has finished; this is the amount that rolls over until next spend.",
                                ],
                            },
                            EventMetadata {
                                name: "Deposit",
                                arguments: [
                                    "Balance",
                                ],
                                documentation: [
                                    " Some funds have been deposited.",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "ProposalBond",
                            ty: "Permill",
                            value: [
                                80,
                                195,
                                0,
                                0,
                            ],
                            documentation: [
                                " Fraction of a proposal\'s value that should be bonded in order to place the proposal.",
                                " An accepted proposal gets these back. A rejected proposal does not.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "ProposalBondMinimum",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                64,
                                229,
                                156,
                                48,
                                18,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " Minimum amount of funds that should be placed in a deposit for making a proposal.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "SpendPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                128,
                                81,
                                1,
                                0,
                            ],
                            documentation: [
                                " Period between successive spends.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "Burn",
                            ty: "Permill",
                            value: [
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " Percentage of spare funds (if any) that are burnt per spend period.",
                            ],
                        },
                    ],
                    errors: [
                        ErrorMetadata {
                            name: "InsufficientProposersBalance",
                            documentation: [
                                " Proposer\'s balance is too low.",
                            ],
                        },
                        ErrorMetadata {
                            name: "InvalidProposalIndex",
                            documentation: [
                                " No proposal at that index.",
                            ],
                        },
                    ],
                },
                ModuleMetadata {
                    name: "Claims",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Claims",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Claims",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "EthereumAddress",
                                        value: "BalanceOf<T>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [],
                                },
                                StorageEntryMetadata {
                                    name: "Total",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "BalanceOf<T>",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [],
                                },
                                StorageEntryMetadata {
                                    name: "Vesting",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "EthereumAddress",
                                        value: "(BalanceOf<T>, BalanceOf<T>, T::BlockNumber)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Vesting schedule for a claim.",
                                        " First balance is the total amount that should be held for vesting.",
                                        " Second balance is how much should be unlocked per block.",
                                        " The block number is when the vesting should start.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "claim",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "dest",
                                        ty: "T::AccountId",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "ethereum_signature",
                                        ty: "EcdsaSignature",
                                    },
                                ],
                                documentation: [
                                    " Make a claim.",
                                ],
                            },
                            FunctionMetadata {
                                name: "mint_claim",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "who",
                                        ty: "EthereumAddress",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "BalanceOf<T>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "vesting_schedule",
                                        ty: "Option<(BalanceOf<T>, BalanceOf<T>, T::BlockNumber)>",
                                    },
                                ],
                                documentation: [
                                    " Add a new claim, if you are root.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Claimed",
                                arguments: [
                                    "AccountId",
                                    "EthereumAddress",
                                    "Balance",
                                ],
                                documentation: [
                                    " Someone claimed some DOTs.",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "Prefix",
                            ty: "&[u8]",
                            value: [
                                124,
                                80,
                                97,
                                121,
                                32,
                                75,
                                83,
                                77,
                                115,
                                32,
                                116,
                                111,
                                32,
                                116,
                                104,
                                101,
                                32,
                                75,
                                117,
                                115,
                                97,
                                109,
                                97,
                                32,
                                97,
                                99,
                                99,
                                111,
                                117,
                                110,
                                116,
                                58,
                            ],
                            documentation: [
                                " The Prefix that is used in signed Ethereum messages for this network",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Parachains",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Parachains",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Authorities",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ValidatorId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " All authorities\' keys at the moment.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Code",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "Vec<u8>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The parachains registered at present.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Heads",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "Vec<u8>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The heads of the parachains registered at present.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Watermarks",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "T::BlockNumber",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The watermark heights of the parachains registered at present.",
                                        " For every parachain, this is the block height from which all messages targeting",
                                        " that parachain have been processed. Can be `None` only if the parachain doesn\'t exist.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "UnroutedIngress",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "(T::BlockNumber, ParaId)",
                                        value: "Vec<(ParaId, Hash)>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Unrouted ingress. Maps (BlockNumber, to_chain) pairs to [(from_chain, egress_root)].",
                                        "",
                                        " There may be an entry under (i, p) in this map for every i between the parachain\'s",
                                        " watermark and the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "RelayDispatchQueue",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "Vec<UpwardMessage>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Messages ready to be dispatched onto the relay chain. It is subject to",
                                        " `MAX_MESSAGE_COUNT` and `WATERMARK_MESSAGE_SIZE`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "RelayDispatchQueueSize",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "(u32, u32)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Size of the dispatch queues. Separated from actual data in order to avoid costly",
                                        " decoding when checking receipt validity. First item in tuple is the count of messages",
                                        "\tsecond if the total length (in bytes) of the message payloads.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NeedsDispatch",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ParaId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The ordered list of ParaIds that have a `RelayDispatchQueue` entry.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DidUpdate",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ParaId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Some if the parachain heads get updated in this block, along with the parachain IDs that",
                                        " did update. Ordered in the same way as `registrar::Active` (i.e. by ParaId).",
                                        "",
                                        " None if not yet updated.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_heads",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "heads",
                                        ty: "Vec<AttestedCandidate>",
                                    },
                                ],
                                documentation: [
                                    " Provide candidate receipts for parachains, in ascending order by id.",
                                ],
                            },
                        ],
                    ),
                    event: None,
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Attestations",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Attestations",
                            entries: [
                                StorageEntryMetadata {
                                    name: "RecentParaBlocks",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::BlockNumber",
                                        value: "IncludedBlocks<T>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " A mapping from modular block number (n % AttestationPeriod)",
                                        " to session index and the list of candidate hashes.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ParaBlockAttestations",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "T::BlockNumber",
                                        key2: "Hash",
                                        value: "BlockAttestations<T>",
                                        key2_hasher: StorageHasher::Blake2_128,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Attestations on a recent parachain block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DidUpdate",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "bool",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "more_attestations",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "_more",
                                        ty: "MoreAttestations",
                                    },
                                ],
                                documentation: [
                                    " Provide candidate receipts for parachains, in ascending order by id.",
                                ],
                            },
                        ],
                    ),
                    event: None,
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Slots",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Slots",
                            entries: [
                                StorageEntryMetadata {
                                    name: "AuctionCounter",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "AuctionIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The number of auctions that have been started so far.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ManagedIds",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ParaId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Ordered list of all `ParaId` values that are managed by this module. This includes",
                                        " chains that are not yet deployed (but have won an auction in the future).",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Deposits",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "Vec<BalanceOf<T>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Various amounts on deposit for each parachain. An entry in `ManagedIds` implies a non-",
                                        " default entry here.",
                                        "",
                                        " The actual amount locked on its behalf at any time is the maximum item in this list. The",
                                        " first item in the list is the amount locked for the current Lease Period. Following",
                                        " items are for the subsequent lease periods.",
                                        "",
                                        " The default value (an empty list) implies that the parachain no longer exists (or never",
                                        " existed) as far as this module is concerned.",
                                        "",
                                        " If a parachain doesn\'t exist *yet* but is scheduled to exist in the future, then it",
                                        " will be left-padded with one or more zeroes to denote the fact that nothing is held on",
                                        " deposit for the non-existent chain currently, but is held at some point in the future.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "AuctionInfo",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "(LeasePeriodOf<T>, T::BlockNumber)",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Information relating to the current auction, if there is one.",
                                        "",
                                        " The first item in the tuple is the lease period index that the first of the four",
                                        " contiguous lease periods on auction is for. The second is the block number when the",
                                        " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Winning",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::BlockNumber",
                                        value: "WinningData<T>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The winning bids for each of the 10 ranges at each block in the final Ending Period of",
                                        " the current auction. The map\'s key is the 0-based index into the Ending Period. The",
                                        " first block of the ending period is 0; the last is `EndingPeriod - 1`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReservedAmounts",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "Bidder<T::AccountId>",
                                        value: "BalanceOf<T>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Amounts currently reserved in the accounts of the bidders currently winning",
                                        " (sub-)ranges.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "OnboardQueue",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "LeasePeriodOf<T>",
                                        value: "Vec<ParaId>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The set of Para IDs that have won and need to be on-boarded at an upcoming lease-period.",
                                        " This is cleared out on the first block of the lease period.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Onboarding",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "(LeasePeriodOf<T>, IncomingParachain<T::AccountId, T::Hash>)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The actual on-boarding information. Only exists when one of the following is true:",
                                        " - It is before the lease period that the parachain should be on-boarded.",
                                        " - The full on-boarding information has not yet been provided and the parachain is not",
                                        " yet due to be off-boarded.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Offboarding",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "T::AccountId",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Off-boarding account; currency held on deposit for the parachain gets placed here if the",
                                        " parachain gets off-boarded; i.e. its lease period is up and it isn\'t renewed.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "new_auction",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "duration",
                                        ty: "Compact<T::BlockNumber>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "lease_period_index",
                                        ty: "Compact<LeasePeriodOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Create a new auction.",
                                    "",
                                    " This can only happen when there isn\'t already an auction in progress and may only be",
                                    " called by the root origin. Accepts the `duration` of this auction and the",
                                    " `lease_period_index` of the initial lease period of the four that are to be auctioned.",
                                ],
                            },
                            FunctionMetadata {
                                name: "bid",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "sub",
                                        ty: "Compact<SubId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "auction_index",
                                        ty: "Compact<AuctionIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "first_slot",
                                        ty: "Compact<LeasePeriodOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "last_slot",
                                        ty: "Compact<LeasePeriodOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "amount",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Make a new bid from an account (including a parachain account) for deploying a new",
                                    " parachain.",
                                    "",
                                    " Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                                    " bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                                    "",
                                    " - `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
                                    " funded by) the same account.",
                                    " - `auction_index` is the index of the auction to bid on. Should just be the present",
                                    " value of `AuctionCounter`.",
                                    " - `first_slot` is the first lease period index of the range to bid on. This is the",
                                    " absolute lease period index value, not an auction-specific offset.",
                                    " - `last_slot` is the last lease period index of the range to bid on. This is the",
                                    " absolute lease period index value, not an auction-specific offset.",
                                    " - `amount` is the amount to bid to be held as deposit for the parachain should the",
                                    " bid win. This amount is held throughout the range.",
                                ],
                            },
                            FunctionMetadata {
                                name: "bid_renew",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "auction_index",
                                        ty: "Compact<AuctionIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "first_slot",
                                        ty: "Compact<LeasePeriodOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "last_slot",
                                        ty: "Compact<LeasePeriodOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "amount",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Make a new bid from a parachain account for renewing that (pre-existing) parachain.",
                                    "",
                                    " The origin *must* be a parachain account.",
                                    "",
                                    " Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                                    " bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                                    "",
                                    " - `auction_index` is the index of the auction to bid on. Should just be the present",
                                    " value of `AuctionCounter`.",
                                    " - `first_slot` is the first lease period index of the range to bid on. This is the",
                                    " absolute lease period index value, not an auction-specific offset.",
                                    " - `last_slot` is the last lease period index of the range to bid on. This is the",
                                    " absolute lease period index value, not an auction-specific offset.",
                                    " - `amount` is the amount to bid to be held as deposit for the parachain should the",
                                    " bid win. This amount is held throughout the range.",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_offboarding",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "dest",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Set the off-boarding information for a parachain.",
                                    "",
                                    " The origin *must* be a parachain account.",
                                    "",
                                    " - `dest` is the destination account to receive the parachain\'s deposit.",
                                ],
                            },
                            FunctionMetadata {
                                name: "fix_deploy_data",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "sub",
                                        ty: "Compact<SubId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "para_id",
                                        ty: "Compact<ParaId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "code_hash",
                                        ty: "T::Hash",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "initial_head_data",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Set the deploy information for a successful bid to deploy a new parachain.",
                                    "",
                                    " - `origin` must be the successful bidder account.",
                                    " - `sub` is the sub-bidder ID of the bidder.",
                                    " - `para_id` is the parachain ID allotted to the winning bidder.",
                                    " - `code_hash` is the hash of the parachain\'s Wasm validation function.",
                                    " - `initial_head_data` is the parachain\'s initial head data.",
                                ],
                            },
                            FunctionMetadata {
                                name: "elaborate_deploy_data",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "para_id",
                                        ty: "Compact<ParaId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "code",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Note a new parachain\'s code.",
                                    "",
                                    " This must be called after `fix_deploy_data` and `code` must be the preimage of the",
                                    " `code_hash` passed there for the same `para_id`.",
                                    "",
                                    " This may be called before or after the beginning of the parachain\'s first lease period.",
                                    " If called before then the parachain will become active at the first block of its",
                                    " starting lease period. If after, then it will become active immediately after this call.",
                                    "",
                                    " - `_origin` is irrelevant.",
                                    " - `para_id` is the parachain ID whose code will be elaborated.",
                                    " - `code` is the preimage of the registered `code_hash` of `para_id`.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewLeasePeriod",
                                arguments: [
                                    "LeasePeriod",
                                ],
                                documentation: [
                                    " A new lease period is beginning.",
                                ],
                            },
                            EventMetadata {
                                name: "AuctionStarted",
                                arguments: [
                                    "AuctionIndex",
                                    "LeasePeriod",
                                    "BlockNumber",
                                ],
                                documentation: [
                                    " An auction started. Provides its index and the block number where it will begin to",
                                    " close and the first lease period of the quadruplet that is auctioned.",
                                ],
                            },
                            EventMetadata {
                                name: "AuctionClosed",
                                arguments: [
                                    "AuctionIndex",
                                ],
                                documentation: [
                                    " An auction ended. All funds become unreserved.",
                                ],
                            },
                            EventMetadata {
                                name: "WonDeploy",
                                arguments: [
                                    "NewBidder<AccountId>",
                                    "SlotRange",
                                    "ParaId",
                                    "Balance",
                                ],
                                documentation: [
                                    " Someone won the right to deploy a parachain. Balance amount is deducted for deposit.",
                                ],
                            },
                            EventMetadata {
                                name: "WonRenewal",
                                arguments: [
                                    "ParaId",
                                    "SlotRange",
                                    "Balance",
                                    "Balance",
                                ],
                                documentation: [
                                    " An existing parachain won the right to continue.",
                                    " First balance is the extra amount reseved. Second is the total amount reserved.",
                                ],
                            },
                            EventMetadata {
                                name: "Reserved",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                    "Balance",
                                ],
                                documentation: [
                                    " Funds were reserved for a winning bid. First balance is the extra amount reserved.",
                                    " Second is the total.",
                                ],
                            },
                            EventMetadata {
                                name: "Unreserved",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " Funds were unreserved since bidder is no longer active.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Registrar",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Registrar",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Parachains",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ParaId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [],
                                },
                                StorageEntryMetadata {
                                    name: "ThreadCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The number of threads to schedule per block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SelectedThreads",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<Vec<(ParaId, CollatorId)>>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " An array of the queue of set of threads scheduled for the coming blocks; ordered by",
                                        " ascending para ID. There can be no duplicates of para ID in each list item.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Active",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(ParaId, Option<(CollatorId, Retriable)>)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Parathreads/chains scheduled for execution this block. If the collator ID is set, then",
                                        " a particular collator has already been chosen for the next block, and no other collator",
                                        " may provide the block. In this case we allow the possibility of the combination being",
                                        " retried in a later block, expressed by `Retriable`.",
                                        "",
                                        " Ordered by ParaId.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NextFreeId",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "ParaId",
                                    ),
                                    default: [
                                        232,
                                        3,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The next unused ParaId value. Start this high in order to keep low numbers for",
                                        " system-level chains.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "PendingSwap",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "ParaId",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Pending swap operations.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Paras",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "ParaInfo",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Map of all registered parathreads/chains.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "RetryQueue",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<Vec<(ParaId, CollatorId)>>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current queue for parathreads that should be retried.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Debtors",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "T::AccountId",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Users who have paid a parathread\'s deposit",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "register_para",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "id",
                                        ty: "Compact<ParaId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "info",
                                        ty: "ParaInfo",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "code",
                                        ty: "Vec<u8>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "initial_head_data",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Register a parachain with given code.",
                                    " Fails if given ID is already used.",
                                ],
                            },
                            FunctionMetadata {
                                name: "deregister_para",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "id",
                                        ty: "Compact<ParaId>",
                                    },
                                ],
                                documentation: [
                                    " Deregister a parachain with given id",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_thread_count",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "count",
                                        ty: "u32",
                                    },
                                ],
                                documentation: [
                                    " Reset the number of parathreads that can pay to be scheduled in a single block.",
                                    "",
                                    " - `count`: The number of parathreads.",
                                    "",
                                    " Must be called from Root origin.",
                                ],
                            },
                            FunctionMetadata {
                                name: "register_parathread",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "code",
                                        ty: "Vec<u8>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "initial_head_data",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Register a parathread for immediate use.",
                                    "",
                                    " Must be sent from a Signed origin that is able to have ParathreadDeposit reserved.",
                                    " `code` and `initial_head_data` are used to initialize the parathread\'s state.",
                                ],
                            },
                            FunctionMetadata {
                                name: "select_parathread",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "_id",
                                        ty: "Compact<ParaId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "_collator",
                                        ty: "CollatorId",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "_head_hash",
                                        ty: "T::Hash",
                                    },
                                ],
                                documentation: [
                                    " Place a bid for a parathread to be progressed in the next block.",
                                    "",
                                    " This is a kind of special transaction that should be heavily prioritized in the",
                                    " transaction pool according to the `value`; only `ThreadCount` of them may be presented",
                                    " in any single block.",
                                ],
                            },
                            FunctionMetadata {
                                name: "deregister_parathread",
                                arguments: [],
                                documentation: [
                                    " Deregister a parathread and retrieve the deposit.",
                                    "",
                                    " Must be sent from a `Parachain` origin which is currently a parathread.",
                                    "",
                                    " Ensure that before calling this that any funds you want emptied from the parathread\'s",
                                    " account is moved out; after this it will be impossible to retrieve them (without",
                                    " governance intervention).",
                                ],
                            },
                            FunctionMetadata {
                                name: "swap",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "other",
                                        ty: "Compact<ParaId>",
                                    },
                                ],
                                documentation: [
                                    " Swap a parachain with another parachain or parathread. The origin must be a `Parachain`.",
                                    " The swap will happen only if there is already an opposite swap pending. If there is not,",
                                    " the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
                                    "",
                                    " The `ParaId`s remain mapped to the same head data and code so external code can rely on",
                                    " `ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
                                    " scheduling info (i.e. whether they\'re a parathread or parachain), auction information",
                                    " and the auction deposit are switched.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "ParathreadRegistered",
                                arguments: [
                                    "ParaId",
                                ],
                                documentation: [
                                    " A parathread was registered; its new ID is supplied.",
                                ],
                            },
                            EventMetadata {
                                name: "ParathreadDeregistered",
                                arguments: [
                                    "ParaId",
                                ],
                                documentation: [
                                    " The parathread of the supplied ID was de-registered.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Nicks",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Sudo",
                            entries: [
                                StorageEntryMetadata {
                                    name: "NameOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "(Vec<u8>, BalanceOf<T>)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The lookup table for names.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_name",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "name",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Set an account\'s name. The name should be a UTF-8-encoded string by convention, though",
                                    " we don\'t check it.",
                                    "",
                                    " The name may not be more than `T::MaxLength` bytes, nor less than `T::MinLength` bytes.",
                                    "",
                                    " If the account doesn\'t already have a name, then a fee of `ReservationFee` is reserved",
                                    " in the account.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - At most one balance operation.",
                                    " - One storage read/write.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "clear_name",
                                arguments: [],
                                documentation: [
                                    " Clear an account\'s name and return the deposit. Fails if the account was not named.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - One balance operation.",
                                    " - One storage read/write.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "kill_name",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "target",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Remove an account\'s name and take charge of the deposit.",
                                    "",
                                    " Fails if `who` has not been named. The deposit is dealt with through `T::Slashed`",
                                    " imbalance handler.",
                                    "",
                                    " The dispatch origin for this call must be _Root_ or match `T::ForceOrigin`.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - One unbalanced handler (probably a balance transfer)",
                                    " - One storage read/write.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_name",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "target",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "name",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Set a third-party account\'s name with no deposit.",
                                    "",
                                    " No length checking is done on the name.",
                                    "",
                                    " The dispatch origin for this call must be _Root_ or match `T::ForceOrigin`.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - At most one balance operation.",
                                    " - One storage read/write.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NameSet",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " A name was set.",
                                ],
                            },
                            EventMetadata {
                                name: "NameForced",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " A name was forcibly set.",
                                ],
                            },
                            EventMetadata {
                                name: "NameChanged",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " A name was changed.",
                                ],
                            },
                            EventMetadata {
                                name: "NameCleared",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " A name was cleared, and the given balance returned.",
                                ],
                            },
                            EventMetadata {
                                name: "NameKilled",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " A name was removed and the given balance slashed.",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "ReservationFee",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                160,
                                114,
                                78,
                                24,
                                9,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " Reservation fee.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "MinLength",
                            ty: "u32",
                            value: [
                                3,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The minimum length a name may be.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "MaxLength",
                            ty: "u32",
                            value: [
                                32,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The maximum length a name may be.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Identity",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Sudo",
                            entries: [
                                StorageEntryMetadata {
                                    name: "IdentityOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "Registration<BalanceOf<T>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Information that is pertinent to identify the entity behind an account.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SuperOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "(T::AccountId, Data)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The super-identity of an alternative \"sub\" identity together with its name, within that",
                                        " context. If the account is not some other account\'s sub-identity, then just `None`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SubsOf",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "(BalanceOf<T>, Vec<T::AccountId>)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Alternative \"sub\" identities of this account.",
                                        "",
                                        " The first item is the deposit, the second is a vector of the accounts.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Registrars",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<Option<RegistrarInfo<BalanceOf<T>, T::AccountId>>>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The set of registrars. Not expected to get very big as can only be added through a",
                                        " special origin (likely a council motion).",
                                        "",
                                        " The index into this can be cast to `RegistrarIndex` to get a valid value.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "add_registrar",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "account",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Add a registrar to the system.",
                                    "",
                                    " The dispatch origin for this call must be `RegistrarOrigin` or `Root`.",
                                    "",
                                    " - `account`: the account of the registrar.",
                                    "",
                                    " Emits `RegistrarAdded` if successful.",
                                    "",
                                    " # <weight>",
                                    " - `O(R)` where `R` registrar-count (governance-bounded).",
                                    " - One storage mutation (codec `O(R)`).",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_identity",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "info",
                                        ty: "IdentityInfo",
                                    },
                                ],
                                documentation: [
                                    " Set an account\'s identity information and reserve the appropriate deposit.",
                                    "",
                                    " If the account already has identity information, the deposit is taken as part payment",
                                    " for the new deposit.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                                    " identity.",
                                    "",
                                    " - `info`: The identity information.",
                                    "",
                                    " Emits `IdentitySet` if successful.",
                                    "",
                                    " # <weight>",
                                    " - `O(X + R)` where `X` additional-field-count (deposit-bounded).",
                                    " - At most two balance operations.",
                                    " - One storage mutation (codec `O(X + R)`).",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_subs",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "subs",
                                        ty: "Vec<(T::AccountId, Data)>",
                                    },
                                ],
                                documentation: [
                                    " Set the sub-accounts of the sender.",
                                    "",
                                    " Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                                    " and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                                    " identity.",
                                    "",
                                    " - `subs`: The identity\'s sub-accounts.",
                                    "",
                                    " # <weight>",
                                    " - `O(S)` where `S` subs-count (hard- and deposit-bounded).",
                                    " - At most two balance operations.",
                                    " - At most O(2 * S + 1) storage mutations; codec complexity `O(1 * S + S * 1)`);",
                                    "   one storage-exists.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "clear_identity",
                                arguments: [],
                                documentation: [
                                    " Clear an account\'s identity info and all sub-account and return all deposits.",
                                    "",
                                    " Payment: All reserved balances on the account are returned.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                                    " identity.",
                                    "",
                                    " Emits `IdentityCleared` if successful.",
                                    "",
                                    " # <weight>",
                                    " - `O(R + S + X)`.",
                                    " - One balance-reserve operation.",
                                    " - `S + 2` storage deletions.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "request_judgement",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "reg_index",
                                        ty: "Compact<RegistrarIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "max_fee",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Request a judgement from a registrar.",
                                    "",
                                    " Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                                    " given.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ and the sender must have a",
                                    " registered identity.",
                                    "",
                                    " - `reg_index`: The index of the registrar whose judgement is requested.",
                                    " - `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                                    "",
                                    " ```nocompile",
                                    " Self::registrars(reg_index).uwnrap().fee",
                                    " ```",
                                    "",
                                    " Emits `JudgementRequested` if successful.",
                                    "",
                                    " # <weight>",
                                    " - `O(R + X)`.",
                                    " - One balance-reserve operation.",
                                    " - Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "cancel_request",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "reg_index",
                                        ty: "RegistrarIndex",
                                    },
                                ],
                                documentation: [
                                    " Cancel a previous request.",
                                    "",
                                    " Payment: A previously reserved deposit is returned on success.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ and the sender must have a",
                                    " registered identity.",
                                    "",
                                    " - `reg_index`: The index of the registrar whose judgement is no longer requested.",
                                    "",
                                    " Emits `JudgementUnrequested` if successful.",
                                    "",
                                    " # <weight>",
                                    " - `O(R + X)`.",
                                    " - One balance-reserve operation.",
                                    " - One storage mutation `O(R + X)`.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_fee",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "index",
                                        ty: "Compact<RegistrarIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "fee",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Set the fee required for a judgement to be requested from a registrar.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                                    " of the registrar whose index is `index`.",
                                    "",
                                    " - `index`: the index of the registrar whose fee is to be set.",
                                    " - `fee`: the new fee.",
                                    "",
                                    " # <weight>",
                                    " - `O(R)`.",
                                    " - One storage mutation `O(R)`.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_account_id",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "index",
                                        ty: "Compact<RegistrarIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "new",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Change the account associated with a registrar.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                                    " of the registrar whose index is `index`.",
                                    "",
                                    " - `index`: the index of the registrar whose fee is to be set.",
                                    " - `new`: the new account ID.",
                                    "",
                                    " # <weight>",
                                    " - `O(R)`.",
                                    " - One storage mutation `O(R)`.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_fields",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "index",
                                        ty: "Compact<RegistrarIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "fields",
                                        ty: "IdentityFields",
                                    },
                                ],
                                documentation: [
                                    " Set the field information for a registrar.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                                    " of the registrar whose index is `index`.",
                                    "",
                                    " - `index`: the index of the registrar whose fee is to be set.",
                                    " - `fields`: the fields that the registrar concerns themselves with.",
                                    "",
                                    " # <weight>",
                                    " - `O(R)`.",
                                    " - One storage mutation `O(R)`.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "provide_judgement",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "reg_index",
                                        ty: "Compact<RegistrarIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "target",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "judgement",
                                        ty: "Judgement<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Provide a judgement for an account\'s identity.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                                    " of the registrar whose index is `reg_index`.",
                                    "",
                                    " - `reg_index`: the index of the registrar whose judgement is being made.",
                                    " - `target`: the account whose identity the judgement is upon. This must be an account",
                                    "   with a registered identity.",
                                    " - `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                                    "",
                                    " Emits `JudgementGiven` if successful.",
                                    "",
                                    " # <weight>",
                                    " - `O(R + X)`.",
                                    " - One balance-transfer operation.",
                                    " - Up to one account-lookup operation.",
                                    " - Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "kill_identity",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "target",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Remove an account\'s identity and sub-account information and slash the deposits.",
                                    "",
                                    " Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                                    " `Slash`. Verification request deposits are not returned; they should be cancelled",
                                    " manually using `cancel_request`.",
                                    "",
                                    " The dispatch origin for this call must be _Root_ or match `T::ForceOrigin`.",
                                    "",
                                    " - `target`: the account whose identity the judgement is upon. This must be an account",
                                    "   with a registered identity.",
                                    "",
                                    " Emits `IdentityKilled` if successful.",
                                    "",
                                    " # <weight>",
                                    " - `O(R + S + X)`.",
                                    " - One balance-reserve operation.",
                                    " - `S + 2` storage mutations.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "IdentitySet",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " A name was set or reset (which will remove all judgements).",
                                ],
                            },
                            EventMetadata {
                                name: "IdentityCleared",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " A name was cleared, and the given balance returned.",
                                ],
                            },
                            EventMetadata {
                                name: "IdentityKilled",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " A name was removed and the given balance slashed.",
                                ],
                            },
                            EventMetadata {
                                name: "JudgementRequested",
                                arguments: [
                                    "AccountId",
                                    "RegistrarIndex",
                                ],
                                documentation: [
                                    " A judgement was asked from a registrar.",
                                ],
                            },
                            EventMetadata {
                                name: "JudgementUnrequested",
                                arguments: [
                                    "AccountId",
                                    "RegistrarIndex",
                                ],
                                documentation: [
                                    " A judgement request was retracted.",
                                ],
                            },
                            EventMetadata {
                                name: "JudgementGiven",
                                arguments: [
                                    "AccountId",
                                    "RegistrarIndex",
                                ],
                                documentation: [
                                    " A judgement was given by a registrar.",
                                ],
                            },
                            EventMetadata {
                                name: "RegistrarAdded",
                                arguments: [
                                    "RegistrarIndex",
                                ],
                                documentation: [
                                    " A registrar was added.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
            ],
        },
    ),
)
[core/src/metadata.rs:441] &meta = Metadata {
    modules: {
        "Babe": ModuleMetadata {
            index: 2,
            name: "Babe",
            storage: {
                "SegmentIndex": StorageMetadata {
                    prefix: "Babe SegmentIndex",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Randomness under construction.",
                        "",
                        " We make a tradeoff between storage accesses and list length.",
                        " We store the under-construction randomness in segments of up to",
                        " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                        "",
                        " Once a segment reaches this length, we begin the next one.",
                        " We reset all segments and return to `0` at the beginning of every",
                        " epoch.",
                    ],
                },
                "Randomness": StorageMetadata {
                    prefix: "Babe Randomness",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "[u8; 32]",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The epoch randomness for the *current* epoch.",
                        "",
                        " # Security",
                        "",
                        " This MUST NOT be used for gambling, as it can be influenced by a",
                        " malicious validator in the short term. It MAY be used in many",
                        " cryptographic protocols, however, so long as one remembers that this",
                        " (like everything else on-chain) it is public. For example, it can be",
                        " used where a number is needed that cannot have been chosen by an",
                        " adversary, for purposes such as public-coin zero-knowledge proofs.",
                    ],
                },
                "GenesisSlot": StorageMetadata {
                    prefix: "Babe GenesisSlot",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u64",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The slot at which the first epoch actually started. This is 0",
                        " until the first block of the chain.",
                    ],
                },
                "UnderConstruction": StorageMetadata {
                    prefix: "Babe UnderConstruction",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "u32",
                        value: "Vec<[u8; 32]>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [],
                },
                "EpochIndex": StorageMetadata {
                    prefix: "Babe EpochIndex",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u64",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Current epoch index.",
                    ],
                },
                "Authorities": StorageMetadata {
                    prefix: "Babe Authorities",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(AuthorityId, BabeAuthorityWeight)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Current epoch authorities.",
                    ],
                },
                "Initialized": StorageMetadata {
                    prefix: "Babe Initialized",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "MaybeVrf",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Temporary value (cleared at block finalization) which is `Some`",
                        " if per-block initialization has already been called for current block.",
                    ],
                },
                "NextRandomness": StorageMetadata {
                    prefix: "Babe NextRandomness",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "[u8; 32]",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Next epoch randomness.",
                    ],
                },
                "CurrentSlot": StorageMetadata {
                    prefix: "Babe CurrentSlot",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u64",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Current slot number.",
                    ],
                },
            },
            calls: {},
            events: {},
        },
        "FinalityTracker": ModuleMetadata {
            index: 11,
            name: "FinalityTracker",
            storage: {},
            calls: {
                "final_hint": [
                    0,
                ],
            },
            events: {},
        },
        "Grandpa": ModuleMetadata {
            index: 12,
            name: "Grandpa",
            storage: {
                "SetIdSession": StorageMetadata {
                    prefix: "GrandpaFinality SetIdSession",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "SetId",
                        value: "SessionIndex",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " A mapping from grandpa set ID to the index of the *most recent* session for which its members were responsible.",
                    ],
                },
                "Authorities": StorageMetadata {
                    prefix: "GrandpaFinality Authorities",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "AuthorityList",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " DEPRECATED",
                        "",
                        " This used to store the current authority set, which has been migrated to the well-known",
                        " GRANDPA_AUTHORITES_KEY unhashed key.",
                    ],
                },
                "NextForced": StorageMetadata {
                    prefix: "GrandpaFinality NextForced",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::BlockNumber",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " next block number where we can force a change.",
                    ],
                },
                "State": StorageMetadata {
                    prefix: "GrandpaFinality State",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "StoredState<T::BlockNumber>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " State of the current authority set.",
                    ],
                },
                "Stalled": StorageMetadata {
                    prefix: "GrandpaFinality Stalled",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "(T::BlockNumber, T::BlockNumber)",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " `true` if we are currently stalled.",
                    ],
                },
                "PendingChange": StorageMetadata {
                    prefix: "GrandpaFinality PendingChange",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "StoredPendingChange<T::BlockNumber>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Pending change: (signaled at, scheduled change).",
                    ],
                },
                "CurrentSetId": StorageMetadata {
                    prefix: "GrandpaFinality CurrentSetId",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "SetId",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The number of changes (both in terms of keys and underlying economic responsibilities)",
                        " in the \"set\" of Grandpa validators from genesis.",
                    ],
                },
            },
            calls: {
                "report_misbehavior": [
                    0,
                ],
            },
            events: {
                2: ModuleEventMetadata {
                    name: "Resumed",
                    arguments: {},
                },
                1: ModuleEventMetadata {
                    name: "Paused",
                    arguments: {},
                },
                0: ModuleEventMetadata {
                    name: "NewAuthorities",
                    arguments: {
                        Primitive(
                            "AuthorityList",
                        ),
                    },
                },
            },
        },
        "TechnicalMembership": ModuleMetadata {
            index: 19,
            name: "TechnicalMembership",
            storage: {
                "Members": StorageMetadata {
                    prefix: "Instance1Membership Members",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current membership, stored as an ordered Vec.",
                    ],
                },
            },
            calls: {
                "add_member": [
                    0,
                ],
                "swap_member": [
                    2,
                ],
                "reset_members": [
                    3,
                ],
                "change_key": [
                    4,
                ],
                "remove_member": [
                    1,
                ],
            },
            events: {
                5: ModuleEventMetadata {
                    name: "Dummy",
                    arguments: {
                        Primitive(
                            "sp_std::marker::PhantomData<(AccountId, Event)>",
                        ),
                    },
                },
                4: ModuleEventMetadata {
                    name: "KeyChanged",
                    arguments: {},
                },
                0: ModuleEventMetadata {
                    name: "MemberAdded",
                    arguments: {},
                },
                1: ModuleEventMetadata {
                    name: "MemberRemoved",
                    arguments: {},
                },
                2: ModuleEventMetadata {
                    name: "MembersSwapped",
                    arguments: {},
                },
                3: ModuleEventMetadata {
                    name: "MembersReset",
                    arguments: {},
                },
            },
        },
        "System": ModuleMetadata {
            index: 0,
            name: "System",
            storage: {
                "ParentHash": StorageMetadata {
                    prefix: "System ParentHash",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::Hash",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Hash of the previous block.",
                    ],
                },
                "EventCount": StorageMetadata {
                    prefix: "System EventCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "EventIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The number of events in the `Events<T>` list.",
                    ],
                },
                "EventTopics": StorageMetadata {
                    prefix: "System EventTopics",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Blake2_256,
                        key1: "()",
                        key2: "T::Hash",
                        value: "Vec<(T::BlockNumber, EventIndex)>",
                        key2_hasher: StorageHasher::Blake2_256,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                        " of events in the `<Events<T>>` list.",
                        "",
                        " The first key serves no purpose. This field is declared as double_map just",
                        " for convenience of using `remove_prefix`.",
                        "",
                        " All topic vectors have deterministic storage locations depending on the topic. This",
                        " allows light-clients to leverage the changes trie storage tracking mechanism and",
                        " in case of changes fetch the list of events of interest.",
                        "",
                        " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                        " the `EventIndex` then in case if the topic has the same contents on the next block",
                        " no notification will be triggered thus the event might be lost.",
                    ],
                },
                "BlockHash": StorageMetadata {
                    prefix: "System BlockHash",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::BlockNumber",
                        value: "T::Hash",
                        is_linked: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Map of block numbers to block hashes.",
                    ],
                },
                "Digest": StorageMetadata {
                    prefix: "System Digest",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "DigestOf<T>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Digest of the current block, also part of the block header.",
                    ],
                },
                "AllExtrinsicsWeight": StorageMetadata {
                    prefix: "System AllExtrinsicsWeight",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "Weight",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Total weight for all extrinsics put together, for the current block.",
                    ],
                },
                "AccountNonce": StorageMetadata {
                    prefix: "System AccountNonce",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "T::Index",
                        is_linked: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Extrinsics nonce for accounts.",
                    ],
                },
                "ExtrinsicCount": StorageMetadata {
                    prefix: "System ExtrinsicCount",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Total extrinsics count for the current block.",
                    ],
                },
                "AllExtrinsicsLen": StorageMetadata {
                    prefix: "System AllExtrinsicsLen",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Total length (in bytes) for all extrinsics put together, for the current block.",
                    ],
                },
                "ExtrinsicData": StorageMetadata {
                    prefix: "System ExtrinsicData",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "u32",
                        value: "Vec<u8>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Extrinsics data for the current block (maps an extrinsic\'s index to its data).",
                    ],
                },
                "Number": StorageMetadata {
                    prefix: "System Number",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::BlockNumber",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The current block number being processed. Set by `execute_block`.",
                    ],
                },
                "ExtrinsicsRoot": StorageMetadata {
                    prefix: "System ExtrinsicsRoot",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::Hash",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Extrinsics root of the current block, also part of the block header.",
                    ],
                },
                "Events": StorageMetadata {
                    prefix: "System Events",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<EventRecord<T::Event, T::Hash>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Events deposited for the current block.",
                    ],
                },
            },
            calls: {
                "set_code": [
                    3,
                ],
                "set_storage": [
                    4,
                ],
                "kill_storage": [
                    5,
                ],
                "kill_prefix": [
                    6,
                ],
                "fill_block": [
                    0,
                ],
                "set_heap_pages": [
                    2,
                ],
                "remark": [
                    1,
                ],
            },
            events: {
                0: ModuleEventMetadata {
                    name: "ExtrinsicSuccess",
                    arguments: {
                        Primitive(
                            "DispatchInfo",
                        ),
                    },
                },
                1: ModuleEventMetadata {
                    name: "ExtrinsicFailed",
                    arguments: {
                        Primitive(
                            "DispatchInfo",
                        ),
                        Primitive(
                            "DispatchError",
                        ),
                    },
                },
            },
        },
        "Indices": ModuleMetadata {
            index: 4,
            name: "Indices",
            storage: {
                "NextEnumSet": StorageMetadata {
                    prefix: "Indices NextEnumSet",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::AccountIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The next free enumeration set.",
                    ],
                },
                "EnumSet": StorageMetadata {
                    prefix: "Indices EnumSet",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountIndex",
                        value: "Vec<T::AccountId>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The enumeration sets.",
                    ],
                },
            },
            calls: {},
            events: {
                0: ModuleEventMetadata {
                    name: "NewAccountIndex",
                    arguments: {
                        Primitive(
                            "AccountIndex",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
            },
        },
        "TechnicalCommittee": ModuleMetadata {
            index: 17,
            name: "TechnicalCommittee",
            storage: {
                "Proposals": StorageMetadata {
                    prefix: "Instance2Collective Proposals",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::Hash>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The hashes of the active proposals.",
                    ],
                },
                "Voting": StorageMetadata {
                    prefix: "Instance2Collective Voting",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::Hash",
                        value: "Votes<T::AccountId>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Votes on a given proposal, if it is ongoing.",
                    ],
                },
                "ProposalCount": StorageMetadata {
                    prefix: "Instance2Collective ProposalCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Proposals so far.",
                    ],
                },
                "Members": StorageMetadata {
                    prefix: "Instance2Collective Members",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current members of the collective. This is stored sorted (just by value).",
                    ],
                },
                "ProposalOf": StorageMetadata {
                    prefix: "Instance2Collective ProposalOf",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::Hash",
                        value: "<T as Trait<I>>::Proposal",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Actual proposal for a given hash, if it\'s current.",
                    ],
                },
            },
            calls: {
                "propose": [
                    2,
                ],
                "execute": [
                    1,
                ],
                "set_members": [
                    0,
                ],
                "vote": [
                    3,
                ],
            },
            events: {
                5: ModuleEventMetadata {
                    name: "MemberExecuted",
                    arguments: {
                        Primitive(
                            "bool",
                        ),
                        Primitive(
                            "Hash",
                        ),
                    },
                },
                3: ModuleEventMetadata {
                    name: "Disapproved",
                    arguments: {
                        Primitive(
                            "Hash",
                        ),
                    },
                },
                2: ModuleEventMetadata {
                    name: "Approved",
                    arguments: {
                        Primitive(
                            "Hash",
                        ),
                    },
                },
                4: ModuleEventMetadata {
                    name: "Executed",
                    arguments: {
                        Primitive(
                            "bool",
                        ),
                        Primitive(
                            "Hash",
                        ),
                    },
                },
                1: ModuleEventMetadata {
                    name: "Voted",
                    arguments: {
                        Primitive(
                            "Hash",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "MemberCount",
                        ),
                        Primitive(
                            "bool",
                        ),
                    },
                },
                0: ModuleEventMetadata {
                    name: "Proposed",
                    arguments: {
                        Primitive(
                            "Hash",
                        ),
                        Primitive(
                            "ProposalIndex",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "MemberCount",
                        ),
                    },
                },
            },
        },
        "Registrar": ModuleMetadata {
            index: 25,
            name: "Registrar",
            storage: {
                "ThreadCount": StorageMetadata {
                    prefix: "Registrar ThreadCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The number of threads to schedule per block.",
                    ],
                },
                "Active": StorageMetadata {
                    prefix: "Registrar Active",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(ParaId, Option<(CollatorId, Retriable)>)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Parathreads/chains scheduled for execution this block. If the collator ID is set, then",
                        " a particular collator has already been chosen for the next block, and no other collator",
                        " may provide the block. In this case we allow the possibility of the combination being",
                        " retried in a later block, expressed by `Retriable`.",
                        "",
                        " Ordered by ParaId.",
                    ],
                },
                "NextFreeId": StorageMetadata {
                    prefix: "Registrar NextFreeId",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "ParaId",
                    ),
                    default: [
                        232,
                        3,
                        0,
                        0,
                    ],
                    documentation: [
                        " The next unused ParaId value. Start this high in order to keep low numbers for",
                        " system-level chains.",
                    ],
                },
                "PendingSwap": StorageMetadata {
                    prefix: "Registrar PendingSwap",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ParaId",
                        value: "ParaId",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Pending swap operations.",
                    ],
                },
                "Paras": StorageMetadata {
                    prefix: "Registrar Paras",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ParaId",
                        value: "ParaInfo",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Map of all registered parathreads/chains.",
                    ],
                },
                "Parachains": StorageMetadata {
                    prefix: "Registrar Parachains",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<ParaId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [],
                },
                "SelectedThreads": StorageMetadata {
                    prefix: "Registrar SelectedThreads",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<Vec<(ParaId, CollatorId)>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " An array of the queue of set of threads scheduled for the coming blocks; ordered by",
                        " ascending para ID. There can be no duplicates of para ID in each list item.",
                    ],
                },
                "RetryQueue": StorageMetadata {
                    prefix: "Registrar RetryQueue",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<Vec<(ParaId, CollatorId)>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current queue for parathreads that should be retried.",
                    ],
                },
                "Debtors": StorageMetadata {
                    prefix: "Registrar Debtors",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ParaId",
                        value: "T::AccountId",
                        is_linked: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Users who have paid a parathread\'s deposit",
                    ],
                },
            },
            calls: {
                "set_thread_count": [
                    2,
                ],
                "select_parathread": [
                    4,
                ],
                "deregister_parathread": [
                    5,
                ],
                "register_para": [
                    0,
                ],
                "deregister_para": [
                    1,
                ],
                "register_parathread": [
                    3,
                ],
                "swap": [
                    6,
                ],
            },
            events: {
                0: ModuleEventMetadata {
                    name: "ParathreadRegistered",
                    arguments: {
                        Primitive(
                            "ParaId",
                        ),
                    },
                },
                1: ModuleEventMetadata {
                    name: "ParathreadDeregistered",
                    arguments: {
                        Primitive(
                            "ParaId",
                        ),
                    },
                },
            },
        },
        "Attestations": ModuleMetadata {
            index: 23,
            name: "Attestations",
            storage: {
                "DidUpdate": StorageMetadata {
                    prefix: "Attestations DidUpdate",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [],
                },
                "RecentParaBlocks": StorageMetadata {
                    prefix: "Attestations RecentParaBlocks",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::BlockNumber",
                        value: "IncludedBlocks<T>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " A mapping from modular block number (n % AttestationPeriod)",
                        " to session index and the list of candidate hashes.",
                    ],
                },
                "ParaBlockAttestations": StorageMetadata {
                    prefix: "Attestations ParaBlockAttestations",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Blake2_256,
                        key1: "T::BlockNumber",
                        key2: "Hash",
                        value: "BlockAttestations<T>",
                        key2_hasher: StorageHasher::Blake2_128,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Attestations on a recent parachain block.",
                    ],
                },
            },
            calls: {
                "more_attestations": [
                    0,
                ],
            },
            events: {},
        },
        "Nicks": ModuleMetadata {
            index: 26,
            name: "Nicks",
            storage: {
                "NameOf": StorageMetadata {
                    prefix: "Sudo NameOf",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "(Vec<u8>, BalanceOf<T>)",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The lookup table for names.",
                    ],
                },
            },
            calls: {
                "set_name": [
                    0,
                ],
                "force_name": [
                    3,
                ],
                "clear_name": [
                    1,
                ],
                "kill_name": [
                    2,
                ],
            },
            events: {
                2: ModuleEventMetadata {
                    name: "NameChanged",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                3: ModuleEventMetadata {
                    name: "NameCleared",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                4: ModuleEventMetadata {
                    name: "NameKilled",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                0: ModuleEventMetadata {
                    name: "NameSet",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                1: ModuleEventMetadata {
                    name: "NameForced",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
            },
        },
        "ImOnline": ModuleMetadata {
            index: 13,
            name: "ImOnline",
            storage: {
                "Keys": StorageMetadata {
                    prefix: "ImOnline Keys",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AuthorityId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current set of keys that may issue a heartbeat.",
                    ],
                },
                "ReceivedHeartbeats": StorageMetadata {
                    prefix: "ImOnline ReceivedHeartbeats",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Blake2_256,
                        key1: "SessionIndex",
                        key2: "AuthIndex",
                        value: "Vec<u8>",
                        key2_hasher: StorageHasher::Blake2_256,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " For each session index, we keep a mapping of `AuthIndex`",
                        " to `offchain::OpaqueNetworkState`.",
                    ],
                },
                "AuthoredBlocks": StorageMetadata {
                    prefix: "ImOnline AuthoredBlocks",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Blake2_256,
                        key1: "SessionIndex",
                        key2: "T::ValidatorId",
                        value: "u32",
                        key2_hasher: StorageHasher::Blake2_256,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " For each session index, we keep a mapping of `T::ValidatorId` to the",
                        " number of blocks authored by the given authority.",
                    ],
                },
                "GossipAt": StorageMetadata {
                    prefix: "ImOnline GossipAt",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::BlockNumber",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The block number when we should gossip.",
                    ],
                },
            },
            calls: {
                "heartbeat": [
                    0,
                ],
            },
            events: {
                1: ModuleEventMetadata {
                    name: "AllGood",
                    arguments: {},
                },
                2: ModuleEventMetadata {
                    name: "SomeOffline",
                    arguments: {
                        Vec(
                            Primitive(
                                "IdentificationTuple",
                            ),
                        ),
                    },
                },
                0: ModuleEventMetadata {
                    name: "HeartbeatReceived",
                    arguments: {
                        Primitive(
                            "AuthorityId",
                        ),
                    },
                },
            },
        },
        "Balances": ModuleMetadata {
            index: 5,
            name: "Balances",
            storage: {
                "FreeBalance": StorageMetadata {
                    prefix: "Balances FreeBalance",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "T::Balance",
                        is_linked: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The \'free\' balance of a given account.",
                        "",
                        " This is the only balance that matters in terms of most operations on tokens. It",
                        " alone is used to determine the balance when in the contract execution environment. When this",
                        " balance falls below the value of `ExistentialDeposit`, then the \'current account\' is",
                        " deleted: specifically `FreeBalance`. Further, the `OnFreeBalanceZero` callback",
                        " is invoked, giving a chance to external modules to clean up data associated with",
                        " the deleted account.",
                        "",
                        " `frame_system::AccountNonce` is also deleted if `ReservedBalance` is also zero (it also gets",
                        " collapsed to zero if it ever becomes less than `ExistentialDeposit`.",
                    ],
                },
                "Locks": StorageMetadata {
                    prefix: "Balances Locks",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "Vec<BalanceLock<T::Balance, T::BlockNumber>>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Any liquidity locks on some account balances.",
                    ],
                },
                "TotalIssuance": StorageMetadata {
                    prefix: "Balances TotalIssuance",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::Balance",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The total units issued in the system.",
                    ],
                },
                "ReservedBalance": StorageMetadata {
                    prefix: "Balances ReservedBalance",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "T::Balance",
                        is_linked: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The amount of the balance of a given account that is externally reserved; this can still get",
                        " slashed, but gets slashed last of all.",
                        "",
                        " This balance is a \'reserve\' balance that other subsystems use in order to set aside tokens",
                        " that are still \'owned\' by the account holder, but which are suspendable.",
                        "",
                        " When this balance falls below the value of `ExistentialDeposit`, then this \'reserve account\'",
                        " is deleted: specifically, `ReservedBalance`.",
                        "",
                        " `frame_system::AccountNonce` is also deleted if `FreeBalance` is also zero (it also gets",
                        " collapsed to zero if it ever becomes less than `ExistentialDeposit`.)",
                    ],
                },
                "Vesting": StorageMetadata {
                    prefix: "Balances Vesting",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "VestingSchedule<T::Balance, T::BlockNumber>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Information regarding the vesting of a given account.",
                    ],
                },
            },
            calls: {
                "transfer": [
                    0,
                ],
                "force_transfer": [
                    2,
                ],
                "set_balance": [
                    1,
                ],
                "transfer_keep_alive": [
                    3,
                ],
            },
            events: {
                0: ModuleEventMetadata {
                    name: "NewAccount",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                1: ModuleEventMetadata {
                    name: "ReapedAccount",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                2: ModuleEventMetadata {
                    name: "Transfer",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                3: ModuleEventMetadata {
                    name: "BalanceSet",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
            },
        },
        "Claims": ModuleMetadata {
            index: 21,
            name: "Claims",
            storage: {
                "Total": StorageMetadata {
                    prefix: "Claims Total",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "BalanceOf<T>",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [],
                },
                "Vesting": StorageMetadata {
                    prefix: "Claims Vesting",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "EthereumAddress",
                        value: "(BalanceOf<T>, BalanceOf<T>, T::BlockNumber)",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Vesting schedule for a claim.",
                        " First balance is the total amount that should be held for vesting.",
                        " Second balance is how much should be unlocked per block.",
                        " The block number is when the vesting should start.",
                    ],
                },
                "Claims": StorageMetadata {
                    prefix: "Claims Claims",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "EthereumAddress",
                        value: "BalanceOf<T>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [],
                },
            },
            calls: {
                "claim": [
                    0,
                ],
                "mint_claim": [
                    1,
                ],
            },
            events: {
                0: ModuleEventMetadata {
                    name: "Claimed",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "EthereumAddress",
                        ),
                        Primitive(
                            "Balance",
                        ),
                    },
                },
            },
        },
        "TransactionPayment": ModuleMetadata {
            index: 6,
            name: "TransactionPayment",
            storage: {
                "NextFeeMultiplier": StorageMetadata {
                    prefix: "Balances NextFeeMultiplier",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Multiplier",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [],
                },
            },
            calls: {},
            events: {},
        },
        "Council": ModuleMetadata {
            index: 16,
            name: "Council",
            storage: {
                "Members": StorageMetadata {
                    prefix: "Instance1Collective Members",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current members of the collective. This is stored sorted (just by value).",
                    ],
                },
                "Proposals": StorageMetadata {
                    prefix: "Instance1Collective Proposals",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::Hash>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The hashes of the active proposals.",
                    ],
                },
                "ProposalCount": StorageMetadata {
                    prefix: "Instance1Collective ProposalCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Proposals so far.",
                    ],
                },
                "ProposalOf": StorageMetadata {
                    prefix: "Instance1Collective ProposalOf",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::Hash",
                        value: "<T as Trait<I>>::Proposal",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Actual proposal for a given hash, if it\'s current.",
                    ],
                },
                "Voting": StorageMetadata {
                    prefix: "Instance1Collective Voting",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::Hash",
                        value: "Votes<T::AccountId>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Votes on a given proposal, if it is ongoing.",
                    ],
                },
            },
            calls: {
                "propose": [
                    2,
                ],
                "vote": [
                    3,
                ],
                "execute": [
                    1,
                ],
                "set_members": [
                    0,
                ],
            },
            events: {
                3: ModuleEventMetadata {
                    name: "Disapproved",
                    arguments: {
                        Primitive(
                            "Hash",
                        ),
                    },
                },
                1: ModuleEventMetadata {
                    name: "Voted",
                    arguments: {
                        Primitive(
                            "bool",
                        ),
                        Primitive(
                            "MemberCount",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "Hash",
                        ),
                    },
                },
                0: ModuleEventMetadata {
                    name: "Proposed",
                    arguments: {
                        Primitive(
                            "MemberCount",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "ProposalIndex",
                        ),
                        Primitive(
                            "Hash",
                        ),
                    },
                },
                4: ModuleEventMetadata {
                    name: "Executed",
                    arguments: {
                        Primitive(
                            "bool",
                        ),
                        Primitive(
                            "Hash",
                        ),
                    },
                },
                5: ModuleEventMetadata {
                    name: "MemberExecuted",
                    arguments: {
                        Primitive(
                            "bool",
                        ),
                        Primitive(
                            "Hash",
                        ),
                    },
                },
                2: ModuleEventMetadata {
                    name: "Approved",
                    arguments: {
                        Primitive(
                            "Hash",
                        ),
                    },
                },
            },
        },
        "Treasury": ModuleMetadata {
            index: 20,
            name: "Treasury",
            storage: {
                "ProposalCount": StorageMetadata {
                    prefix: "Treasury ProposalCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "ProposalIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Number of proposals that have been made.",
                    ],
                },
                "Proposals": StorageMetadata {
                    prefix: "Treasury Proposals",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ProposalIndex",
                        value: "Proposal<T::AccountId, BalanceOf<T>>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Proposals that have been made.",
                    ],
                },
                "Approvals": StorageMetadata {
                    prefix: "Treasury Approvals",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<ProposalIndex>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Proposal indices that have been approved but not yet awarded.",
                    ],
                },
            },
            calls: {
                "propose_spend": [
                    0,
                ],
                "reject_proposal": [
                    1,
                ],
                "approve_proposal": [
                    2,
                ],
            },
            events: {
                1: ModuleEventMetadata {
                    name: "Spending",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                0: ModuleEventMetadata {
                    name: "Proposed",
                    arguments: {
                        Primitive(
                            "ProposalIndex",
                        ),
                    },
                },
                3: ModuleEventMetadata {
                    name: "Burnt",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                4: ModuleEventMetadata {
                    name: "Rollover",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                5: ModuleEventMetadata {
                    name: "Deposit",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                2: ModuleEventMetadata {
                    name: "Awarded",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "Balance",
                        ),
                        Primitive(
                            "ProposalIndex",
                        ),
                    },
                },
            },
        },
        "AuthorityDiscovery": ModuleMetadata {
            index: 14,
            name: "AuthorityDiscovery",
            storage: {},
            calls: {},
            events: {},
        },
        "Timestamp": ModuleMetadata {
            index: 3,
            name: "Timestamp",
            storage: {
                "Now": StorageMetadata {
                    prefix: "Timestamp Now",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "T::Moment",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Current time for the current block.",
                    ],
                },
                "DidUpdate": StorageMetadata {
                    prefix: "Timestamp DidUpdate",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Did the timestamp get updated in this block?",
                    ],
                },
            },
            calls: {
                "set": [
                    0,
                ],
            },
            events: {},
        },
        "Staking": ModuleMetadata {
            index: 8,
            name: "Staking",
            storage: {
                "SlotStake": StorageMetadata {
                    prefix: "Staking SlotStake",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "BalanceOf<T>",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The amount of balance actively at stake for each validator slot, currently.",
                        "",
                        " This is used to derive rewards and punishments.",
                    ],
                },
                "UnappliedSlashes": StorageMetadata {
                    prefix: "Staking UnappliedSlashes",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "EraIndex",
                        value: "Vec<UnappliedSlash<T::AccountId, BalanceOf<T>>>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " All unapplied slashes that are queued for later.",
                    ],
                },
                "BondedEras": StorageMetadata {
                    prefix: "Staking BondedEras",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(EraIndex, SessionIndex)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " A mapping from still-bonded eras to the first session index of that era.",
                    ],
                },
                "ValidatorSlashInEra": StorageMetadata {
                    prefix: "Staking ValidatorSlashInEra",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Blake2_256,
                        key1: "EraIndex",
                        key2: "T::AccountId",
                        value: "(Perbill, BalanceOf<T>)",
                        key2_hasher: StorageHasher::Twox128,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " All slashing events on validators, mapped by era to the highest slash proportion",
                        " and slash value of the era.",
                    ],
                },
                "ForceEra": StorageMetadata {
                    prefix: "Staking ForceEra",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Forcing",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " True if the next session change will be a new era regardless of index.",
                    ],
                },
                "NominatorSlashInEra": StorageMetadata {
                    prefix: "Staking NominatorSlashInEra",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Blake2_256,
                        key1: "EraIndex",
                        key2: "T::AccountId",
                        value: "BalanceOf<T>",
                        key2_hasher: StorageHasher::Twox128,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " All slashing events on nominators, mapped by era to the highest slash value of the era.",
                    ],
                },
                "SpanSlash": StorageMetadata {
                    prefix: "Staking SpanSlash",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "(T::AccountId, slashing::SpanIndex)",
                        value: "slashing::SpanRecord<BalanceOf<T>>",
                        is_linked: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Records information about the maximum slash of a stash within a slashing span,",
                        " as well as how much reward has been paid out.",
                    ],
                },
                "EarliestUnappliedSlash": StorageMetadata {
                    prefix: "Staking EarliestUnappliedSlash",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "EraIndex",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The earliest era for which we have a pending, unapplied slash.",
                    ],
                },
                "SlashRewardFraction": StorageMetadata {
                    prefix: "Staking SlashRewardFraction",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Perbill",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The percentage of the slash that is distributed to reporters.",
                        "",
                        " The rest of the slashed value is handled by the `Slash`.",
                    ],
                },
                "Validators": StorageMetadata {
                    prefix: "Staking Validators",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "ValidatorPrefs",
                        is_linked: true,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The map from (wannabe) validator stash key to the preferences of that validator.",
                    ],
                },
                "StorageVersion": StorageMetadata {
                    prefix: "Staking StorageVersion",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The version of storage for upgrade.",
                    ],
                },
                "Nominators": StorageMetadata {
                    prefix: "Staking Nominators",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "Nominations<T::AccountId>",
                        is_linked: true,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The map from nominator stash key to the set of stash keys of all validators to nominate.",
                        "",
                        " NOTE: is private so that we can ensure upgraded before all typical accesses.",
                        " Direct storage APIs can still bypass this protection.",
                    ],
                },
                "CanceledSlashPayout": StorageMetadata {
                    prefix: "Staking CanceledSlashPayout",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "BalanceOf<T>",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The amount of currency given to reporters of a slash event which was",
                        " canceled by extraordinary circumstances (e.g. governance).",
                    ],
                },
                "Payee": StorageMetadata {
                    prefix: "Staking Payee",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "RewardDestination",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Where the reward payment should be made. Keyed by stash.",
                    ],
                },
                "SlashingSpans": StorageMetadata {
                    prefix: "Staking SlashingSpans",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "slashing::SlashingSpans",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Slashing spans for stash accounts.",
                    ],
                },
                "MinimumValidatorCount": StorageMetadata {
                    prefix: "Staking MinimumValidatorCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        4,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Minimum number of staking participants before emergency conditions are imposed.",
                    ],
                },
                "CurrentEraPointsEarned": StorageMetadata {
                    prefix: "Staking CurrentEraPointsEarned",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "EraPoints",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Rewards for the current era. Using indices of current elected set.",
                    ],
                },
                "Ledger": StorageMetadata {
                    prefix: "Staking Ledger",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "StakingLedger<T::AccountId, BalanceOf<T>>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Map from all (unlocked) \"controller\" accounts to the info regarding the staking.",
                    ],
                },
                "CurrentEra": StorageMetadata {
                    prefix: "Staking CurrentEra",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "EraIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The current era index.",
                    ],
                },
                "CurrentEraStartSessionIndex": StorageMetadata {
                    prefix: "Staking CurrentEraStartSessionIndex",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "SessionIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The session index at which the current era started.",
                    ],
                },
                "Invulnerables": StorageMetadata {
                    prefix: "Staking Invulnerables",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Any validators that may never be slashed or forcibly kicked. It\'s a Vec since they\'re",
                        " easy to initialize and the performance hit is minimal (we expect no more than four",
                        " invulnerables) and restricted to testnets.",
                    ],
                },
                "Bonded": StorageMetadata {
                    prefix: "Staking Bonded",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "T::AccountId",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Map from all locked \"stash\" accounts to the controller account.",
                    ],
                },
                "ValidatorCount": StorageMetadata {
                    prefix: "Staking ValidatorCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The ideal number of staking participants.",
                    ],
                },
                "Stakers": StorageMetadata {
                    prefix: "Staking Stakers",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "Exposure<T::AccountId, BalanceOf<T>>",
                        is_linked: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Nominators for a particular account that is in action right now. You can\'t iterate",
                        " through validators here, but you can find them in the Session module.",
                        "",
                        " This is keyed by the stash account.",
                    ],
                },
                "CurrentEraStart": StorageMetadata {
                    prefix: "Staking CurrentEraStart",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "MomentOf<T>",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The start of the current era.",
                    ],
                },
                "CurrentElected": StorageMetadata {
                    prefix: "Staking CurrentElected",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The currently elected validator set keyed by stash account ID.",
                    ],
                },
            },
            calls: {
                "force_unstake": [
                    13,
                ],
                "validate": [
                    4,
                ],
                "set_controller": [
                    8,
                ],
                "force_no_eras": [
                    10,
                ],
                "force_new_era_always": [
                    14,
                ],
                "bond": [
                    0,
                ],
                "bond_extra": [
                    1,
                ],
                "set_invulnerables": [
                    12,
                ],
                "unbond": [
                    2,
                ],
                "nominate": [
                    5,
                ],
                "withdraw_unbonded": [
                    3,
                ],
                "set_payee": [
                    7,
                ],
                "chill": [
                    6,
                ],
                "cancel_deferred_slash": [
                    15,
                ],
                "set_validator_count": [
                    9,
                ],
                "force_new_era": [
                    11,
                ],
            },
            events: {
                0: ModuleEventMetadata {
                    name: "Reward",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                1: ModuleEventMetadata {
                    name: "Slash",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                2: ModuleEventMetadata {
                    name: "OldSlashingReportDiscarded",
                    arguments: {
                        Primitive(
                            "SessionIndex",
                        ),
                    },
                },
            },
        },
        "Offences": ModuleMetadata {
            index: 9,
            name: "Offences",
            storage: {
                "ConcurrentReportsIndex": StorageMetadata {
                    prefix: "Offences ConcurrentReportsIndex",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Blake2_256,
                        key1: "Kind",
                        key2: "OpaqueTimeSlot",
                        value: "Vec<ReportIdOf<T>>",
                        key2_hasher: StorageHasher::Blake2_256,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " A vector of reports of the same kind that happened at the same time slot.",
                    ],
                },
                "Reports": StorageMetadata {
                    prefix: "Offences Reports",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ReportIdOf<T>",
                        value: "OffenceDetails<T::AccountId, T::IdentificationTuple>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The primary structure that holds all offence records keyed by report identifiers.",
                    ],
                },
                "ReportsByKindIndex": StorageMetadata {
                    prefix: "Offences ReportsByKindIndex",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "Kind",
                        value: "Vec<u8>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Enumerates all reports of a kind along with the time they happened.",
                        "",
                        " All reports are sorted by the time of offence.",
                        "",
                        " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                        " different types are not supported at the moment so we are doing the manual serialization.",
                    ],
                },
            },
            calls: {},
            events: {
                0: ModuleEventMetadata {
                    name: "Offence",
                    arguments: {
                        Primitive(
                            "Kind",
                        ),
                        Primitive(
                            "OpaqueTimeSlot",
                        ),
                    },
                },
            },
        },
        "Democracy": ModuleMetadata {
            index: 15,
            name: "Democracy",
            storage: {
                "DispatchQueue": StorageMetadata {
                    prefix: "Democracy DispatchQueue",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(T::BlockNumber, T::Hash, ReferendumIndex)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Queue of successful referenda to be dispatched. Stored ordered by block number.",
                    ],
                },
                "DepositOf": StorageMetadata {
                    prefix: "Democracy DepositOf",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "PropIndex",
                        value: "(BalanceOf<T>, Vec<T::AccountId>)",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Those who have locked a deposit.",
                    ],
                },
                "Delegations": StorageMetadata {
                    prefix: "Democracy Delegations",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "(T::AccountId, Conviction)",
                        is_linked: true,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Get the account (and lock periods) to which another account is delegating vote.",
                    ],
                },
                "NextExternal": StorageMetadata {
                    prefix: "Democracy NextExternal",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "(T::Hash, VoteThreshold)",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The referendum to be tabled whenever it would be valid to table an external proposal.",
                        " This happens when a referendum needs to be tabled and one of two conditions are met:",
                        " - `LastTabledWasExternal` is `false`; or",
                        " - `PublicProps` is empty.",
                    ],
                },
                "VoteOf": StorageMetadata {
                    prefix: "Democracy VoteOf",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "(ReferendumIndex, T::AccountId)",
                        value: "Vote",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Get the vote in a given referendum of a particular voter. The result is meaningful only",
                        " if `voters_for` includes the voter when called with the referendum (you\'ll get the",
                        " default `Vote` value otherwise). If you don\'t want to check `voters_for`, then you can",
                        " also check for simple existence with `VoteOf::exists` first.",
                    ],
                },
                "PublicProps": StorageMetadata {
                    prefix: "Democracy PublicProps",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(PropIndex, T::Hash, T::AccountId)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The public proposals. Unsorted. The second item is the proposal\'s hash.",
                    ],
                },
                "Preimages": StorageMetadata {
                    prefix: "Democracy Preimages",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::Hash",
                        value: "(Vec<u8>, T::AccountId, BalanceOf<T>, T::BlockNumber)",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                        " The block number is the block at which it was deposited.",
                    ],
                },
                "PublicPropCount": StorageMetadata {
                    prefix: "Democracy PublicPropCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "PropIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The number of (public) proposals that have been made so far.",
                    ],
                },
                "ReferendumCount": StorageMetadata {
                    prefix: "Democracy ReferendumCount",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "ReferendumIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The next free referendum index, aka the number of referenda started so far.",
                    ],
                },
                "LowestUnbaked": StorageMetadata {
                    prefix: "Democracy LowestUnbaked",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "ReferendumIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The lowest referendum index representing an unbaked referendum. Equal to",
                        " `ReferendumCount` if there isn\'t a unbaked referendum.",
                    ],
                },
                "Blacklist": StorageMetadata {
                    prefix: "Democracy Blacklist",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::Hash",
                        value: "(T::BlockNumber, Vec<T::AccountId>)",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                        " (until when it may not be resubmitted) and who vetoed it.",
                    ],
                },
                "Cancellations": StorageMetadata {
                    prefix: "Democracy Cancellations",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::Hash",
                        value: "bool",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Record of all proposals that have been subject to emergency cancellation.",
                    ],
                },
                "VotersFor": StorageMetadata {
                    prefix: "Democracy VotersFor",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ReferendumIndex",
                        value: "Vec<T::AccountId>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Get the voters for the current proposal.",
                    ],
                },
                "Proxy": StorageMetadata {
                    prefix: "Democracy Proxy",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "T::AccountId",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Who is able to vote for whom. Value is the fund-holding account, key is the",
                        " vote-transaction-sending account.",
                    ],
                },
                "ReferendumInfoOf": StorageMetadata {
                    prefix: "Democracy ReferendumInfoOf",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ReferendumIndex",
                        value: "ReferendumInfo<T::BlockNumber, T::Hash>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Information concerning any given referendum.",
                    ],
                },
                "LastTabledWasExternal": StorageMetadata {
                    prefix: "Democracy LastTabledWasExternal",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " True if the last referendum tabled was submitted externally. False if it was a public",
                        " proposal.",
                    ],
                },
            },
            calls: {
                "second": [
                    1,
                ],
                "cancel_queued": [
                    11,
                ],
                "remove_proxy": [
                    14,
                ],
                "external_propose": [
                    5,
                ],
                "veto_external": [
                    9,
                ],
                "note_imminent_preimage": [
                    19,
                ],
                "reap_preimage": [
                    20,
                ],
                "cancel_referendum": [
                    10,
                ],
                "vote": [
                    2,
                ],
                "fast_track": [
                    8,
                ],
                "set_proxy": [
                    12,
                ],
                "external_propose_default": [
                    7,
                ],
                "undelegate": [
                    16,
                ],
                "clear_public_proposals": [
                    17,
                ],
                "emergency_cancel": [
                    4,
                ],
                "external_propose_majority": [
                    6,
                ],
                "proxy_vote": [
                    3,
                ],
                "delegate": [
                    15,
                ],
                "note_preimage": [
                    18,
                ],
                "resign_proxy": [
                    13,
                ],
                "propose": [
                    0,
                ],
            },
            events: {
                0: ModuleEventMetadata {
                    name: "Proposed",
                    arguments: {
                        Primitive(
                            "PropIndex",
                        ),
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                4: ModuleEventMetadata {
                    name: "Passed",
                    arguments: {
                        Primitive(
                            "ReferendumIndex",
                        ),
                    },
                },
                1: ModuleEventMetadata {
                    name: "Tabled",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                        Vec(
                            Primitive(
                                "AccountId",
                            ),
                        ),
                        Primitive(
                            "PropIndex",
                        ),
                    },
                },
                3: ModuleEventMetadata {
                    name: "Started",
                    arguments: {
                        Primitive(
                            "ReferendumIndex",
                        ),
                        Primitive(
                            "VoteThreshold",
                        ),
                    },
                },
                2: ModuleEventMetadata {
                    name: "ExternalTabled",
                    arguments: {},
                },
                5: ModuleEventMetadata {
                    name: "NotPassed",
                    arguments: {
                        Primitive(
                            "ReferendumIndex",
                        ),
                    },
                },
                7: ModuleEventMetadata {
                    name: "Executed",
                    arguments: {
                        Primitive(
                            "ReferendumIndex",
                        ),
                        Primitive(
                            "bool",
                        ),
                    },
                },
                15: ModuleEventMetadata {
                    name: "PreimageReaped",
                    arguments: {
                        Primitive(
                            "Hash",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                8: ModuleEventMetadata {
                    name: "Delegated",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                13: ModuleEventMetadata {
                    name: "PreimageInvalid",
                    arguments: {
                        Primitive(
                            "Hash",
                        ),
                        Primitive(
                            "ReferendumIndex",
                        ),
                    },
                },
                14: ModuleEventMetadata {
                    name: "PreimageMissing",
                    arguments: {
                        Primitive(
                            "Hash",
                        ),
                        Primitive(
                            "ReferendumIndex",
                        ),
                    },
                },
                9: ModuleEventMetadata {
                    name: "Undelegated",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                10: ModuleEventMetadata {
                    name: "Vetoed",
                    arguments: {
                        Primitive(
                            "BlockNumber",
                        ),
                        Primitive(
                            "Hash",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                12: ModuleEventMetadata {
                    name: "PreimageUsed",
                    arguments: {
                        Primitive(
                            "Hash",
                        ),
                        Primitive(
                            "Balance",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                6: ModuleEventMetadata {
                    name: "Cancelled",
                    arguments: {
                        Primitive(
                            "ReferendumIndex",
                        ),
                    },
                },
                11: ModuleEventMetadata {
                    name: "PreimageNoted",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                        Primitive(
                            "Hash",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
            },
        },
        "ElectionsPhragmen": ModuleMetadata {
            index: 18,
            name: "ElectionsPhragmen",
            storage: {
                "Candidates": StorageMetadata {
                    prefix: "PhragmenElection Candidates",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::AccountId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The present candidate list. Sorted based on account id. A current member can never enter",
                        " this vector and is always implicitly assumed to be a candidate.",
                    ],
                },
                "RunnersUp": StorageMetadata {
                    prefix: "PhragmenElection RunnersUp",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(T::AccountId, BalanceOf<T>)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current runners_up. Sorted based on low to high merit (worse to best runner).",
                    ],
                },
                "VotesOf": StorageMetadata {
                    prefix: "PhragmenElection VotesOf",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "Vec<T::AccountId>",
                        is_linked: true,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Votes of a particular voter, with the round index of the votes.",
                    ],
                },
                "StakeOf": StorageMetadata {
                    prefix: "PhragmenElection StakeOf",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "BalanceOf<T>",
                        is_linked: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Locked stake of a voter.",
                    ],
                },
                "ElectionRounds": StorageMetadata {
                    prefix: "PhragmenElection ElectionRounds",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "u32",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The total number of vote rounds that have happened, excluding the upcoming one.",
                    ],
                },
                "Members": StorageMetadata {
                    prefix: "PhragmenElection Members",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(T::AccountId, BalanceOf<T>)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current elected membership. Sorted based on account id.",
                    ],
                },
            },
            calls: {
                "remove_member": [
                    5,
                ],
                "submit_candidacy": [
                    3,
                ],
                "renounce_candidacy": [
                    4,
                ],
                "vote": [
                    0,
                ],
                "remove_voter": [
                    1,
                ],
                "report_defunct_voter": [
                    2,
                ],
            },
            events: {
                4: ModuleEventMetadata {
                    name: "VoterReported",
                    arguments: {
                        Primitive(
                            "bool",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                2: ModuleEventMetadata {
                    name: "MemberKicked",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                1: ModuleEventMetadata {
                    name: "EmptyTerm",
                    arguments: {},
                },
                0: ModuleEventMetadata {
                    name: "NewTerm",
                    arguments: {
                        Vec(
                            Tuple(
                                [
                                    Primitive(
                                        "AccountId",
                                    ),
                                    Primitive(
                                        "Balance",
                                    ),
                                ],
                            ),
                        ),
                    },
                },
                3: ModuleEventMetadata {
                    name: "MemberRenounced",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
            },
        },
        "Authorship": ModuleMetadata {
            index: 7,
            name: "Authorship",
            storage: {
                "Author": StorageMetadata {
                    prefix: "Authorship Author",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "T::AccountId",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Author of current block.",
                    ],
                },
                "Uncles": StorageMetadata {
                    prefix: "Authorship Uncles",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<UncleEntryItem<T::BlockNumber, T::Hash, T::AccountId>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Uncles",
                    ],
                },
                "DidSetUncles": StorageMetadata {
                    prefix: "Authorship DidSetUncles",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Whether uncles were already set in this block.",
                    ],
                },
            },
            calls: {
                "set_uncles": [
                    0,
                ],
            },
            events: {},
        },
        "Slots": ModuleMetadata {
            index: 24,
            name: "Slots",
            storage: {
                "OnboardQueue": StorageMetadata {
                    prefix: "Slots OnboardQueue",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "LeasePeriodOf<T>",
                        value: "Vec<ParaId>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The set of Para IDs that have won and need to be on-boarded at an upcoming lease-period.",
                        " This is cleared out on the first block of the lease period.",
                    ],
                },
                "Onboarding": StorageMetadata {
                    prefix: "Slots Onboarding",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ParaId",
                        value: "(LeasePeriodOf<T>, IncomingParachain<T::AccountId, T::Hash>)",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The actual on-boarding information. Only exists when one of the following is true:",
                        " - It is before the lease period that the parachain should be on-boarded.",
                        " - The full on-boarding information has not yet been provided and the parachain is not",
                        " yet due to be off-boarded.",
                    ],
                },
                "AuctionCounter": StorageMetadata {
                    prefix: "Slots AuctionCounter",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "AuctionIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " The number of auctions that have been started so far.",
                    ],
                },
                "Offboarding": StorageMetadata {
                    prefix: "Slots Offboarding",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ParaId",
                        value: "T::AccountId",
                        is_linked: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Off-boarding account; currency held on deposit for the parachain gets placed here if the",
                        " parachain gets off-boarded; i.e. its lease period is up and it isn\'t renewed.",
                    ],
                },
                "Deposits": StorageMetadata {
                    prefix: "Slots Deposits",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ParaId",
                        value: "Vec<BalanceOf<T>>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Various amounts on deposit for each parachain. An entry in `ManagedIds` implies a non-",
                        " default entry here.",
                        "",
                        " The actual amount locked on its behalf at any time is the maximum item in this list. The",
                        " first item in the list is the amount locked for the current Lease Period. Following",
                        " items are for the subsequent lease periods.",
                        "",
                        " The default value (an empty list) implies that the parachain no longer exists (or never",
                        " existed) as far as this module is concerned.",
                        "",
                        " If a parachain doesn\'t exist *yet* but is scheduled to exist in the future, then it",
                        " will be left-padded with one or more zeroes to denote the fact that nothing is held on",
                        " deposit for the non-existent chain currently, but is held at some point in the future.",
                    ],
                },
                "ReservedAmounts": StorageMetadata {
                    prefix: "Slots ReservedAmounts",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "Bidder<T::AccountId>",
                        value: "BalanceOf<T>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Amounts currently reserved in the accounts of the bidders currently winning",
                        " (sub-)ranges.",
                    ],
                },
                "ManagedIds": StorageMetadata {
                    prefix: "Slots ManagedIds",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<ParaId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Ordered list of all `ParaId` values that are managed by this module. This includes",
                        " chains that are not yet deployed (but have won an auction in the future).",
                    ],
                },
                "AuctionInfo": StorageMetadata {
                    prefix: "Slots AuctionInfo",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "(LeasePeriodOf<T>, T::BlockNumber)",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Information relating to the current auction, if there is one.",
                        "",
                        " The first item in the tuple is the lease period index that the first of the four",
                        " contiguous lease periods on auction is for. The second is the block number when the",
                        " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction.",
                    ],
                },
                "Winning": StorageMetadata {
                    prefix: "Slots Winning",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::BlockNumber",
                        value: "WinningData<T>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The winning bids for each of the 10 ranges at each block in the final Ending Period of",
                        " the current auction. The map\'s key is the 0-based index into the Ending Period. The",
                        " first block of the ending period is 0; the last is `EndingPeriod - 1`.",
                    ],
                },
            },
            calls: {
                "bid_renew": [
                    2,
                ],
                "elaborate_deploy_data": [
                    5,
                ],
                "new_auction": [
                    0,
                ],
                "set_offboarding": [
                    3,
                ],
                "fix_deploy_data": [
                    4,
                ],
                "bid": [
                    1,
                ],
            },
            events: {
                4: ModuleEventMetadata {
                    name: "WonRenewal",
                    arguments: {
                        Primitive(
                            "SlotRange",
                        ),
                        Primitive(
                            "ParaId",
                        ),
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                3: ModuleEventMetadata {
                    name: "WonDeploy",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                        Primitive(
                            "ParaId",
                        ),
                        Primitive(
                            "NewBidder<AccountId>",
                        ),
                        Primitive(
                            "SlotRange",
                        ),
                    },
                },
                2: ModuleEventMetadata {
                    name: "AuctionClosed",
                    arguments: {
                        Primitive(
                            "AuctionIndex",
                        ),
                    },
                },
                1: ModuleEventMetadata {
                    name: "AuctionStarted",
                    arguments: {
                        Primitive(
                            "LeasePeriod",
                        ),
                        Primitive(
                            "BlockNumber",
                        ),
                        Primitive(
                            "AuctionIndex",
                        ),
                    },
                },
                5: ModuleEventMetadata {
                    name: "Reserved",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                6: ModuleEventMetadata {
                    name: "Unreserved",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                0: ModuleEventMetadata {
                    name: "NewLeasePeriod",
                    arguments: {
                        Primitive(
                            "LeasePeriod",
                        ),
                    },
                },
            },
        },
        "Session": ModuleMetadata {
            index: 10,
            name: "Session",
            storage: {
                "NextKeys": StorageMetadata {
                    prefix: "Session NextKeys",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "Vec<u8>",
                        key2: "T::ValidatorId",
                        value: "T::Keys",
                        key2_hasher: StorageHasher::Blake2_256,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The next session keys for a validator.",
                        "",
                        " The first key is always `DEDUP_KEY_PREFIX` to have all the data in the same branch of",
                        " the trie. Having all data in the same branch should prevent slowing down other queries.",
                    ],
                },
                "CurrentIndex": StorageMetadata {
                    prefix: "Session CurrentIndex",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "SessionIndex",
                    ),
                    default: [
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Current index of the session.",
                    ],
                },
                "QueuedKeys": StorageMetadata {
                    prefix: "Session QueuedKeys",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<(T::ValidatorId, T::Keys)>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The queued keys for the next session. When the next session begins, these keys",
                        " will be used to determine the validator\'s session keys.",
                    ],
                },
                "KeyOwner": StorageMetadata {
                    prefix: "Session KeyOwner",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::DoubleMap {
                        hasher: StorageHasher::Twox64Concat,
                        key1: "Vec<u8>",
                        key2: "(KeyTypeId, Vec<u8>)",
                        value: "T::ValidatorId",
                        key2_hasher: StorageHasher::Blake2_256,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The owner of a key. The second key is the `KeyTypeId` + the encoded key.",
                        "",
                        " The first key is always `DEDUP_KEY_PREFIX` to have all the data in the same branch of",
                        " the trie. Having all data in the same branch should prevent slowing down other queries.",
                    ],
                },
                "DisabledValidators": StorageMetadata {
                    prefix: "Session DisabledValidators",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<u32>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Indices of disabled validators.",
                        "",
                        " The set is cleared when `on_session_ending` returns a new set of identities.",
                    ],
                },
                "Validators": StorageMetadata {
                    prefix: "Session Validators",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::ValidatorId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The current set of validators.",
                    ],
                },
                "QueuedChanged": StorageMetadata {
                    prefix: "Session QueuedChanged",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "bool",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " True if the underlying economic identities or weighting behind the validators",
                        " has changed in the queued validator set.",
                    ],
                },
            },
            calls: {
                "set_keys": [
                    0,
                ],
            },
            events: {
                0: ModuleEventMetadata {
                    name: "NewSession",
                    arguments: {
                        Primitive(
                            "SessionIndex",
                        ),
                    },
                },
            },
        },
        "Parachains": ModuleMetadata {
            index: 22,
            name: "Parachains",
            storage: {
                "Code": StorageMetadata {
                    prefix: "Parachains Code",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ParaId",
                        value: "Vec<u8>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The parachains registered at present.",
                    ],
                },
                "Heads": StorageMetadata {
                    prefix: "Parachains Heads",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ParaId",
                        value: "Vec<u8>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The heads of the parachains registered at present.",
                    ],
                },
                "NeedsDispatch": StorageMetadata {
                    prefix: "Parachains NeedsDispatch",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<ParaId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The ordered list of ParaIds that have a `RelayDispatchQueue` entry.",
                    ],
                },
                "RelayDispatchQueue": StorageMetadata {
                    prefix: "Parachains RelayDispatchQueue",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ParaId",
                        value: "Vec<UpwardMessage>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Messages ready to be dispatched onto the relay chain. It is subject to",
                        " `MAX_MESSAGE_COUNT` and `WATERMARK_MESSAGE_SIZE`.",
                    ],
                },
                "DidUpdate": StorageMetadata {
                    prefix: "Parachains DidUpdate",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Plain(
                        "Vec<ParaId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Some if the parachain heads get updated in this block, along with the parachain IDs that",
                        " did update. Ordered in the same way as `registrar::Active` (i.e. by ParaId).",
                        "",
                        " None if not yet updated.",
                    ],
                },
                "UnroutedIngress": StorageMetadata {
                    prefix: "Parachains UnroutedIngress",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "(T::BlockNumber, ParaId)",
                        value: "Vec<(ParaId, Hash)>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Unrouted ingress. Maps (BlockNumber, to_chain) pairs to [(from_chain, egress_root)].",
                        "",
                        " There may be an entry under (i, p) in this map for every i between the parachain\'s",
                        " watermark and the current block.",
                    ],
                },
                "Authorities": StorageMetadata {
                    prefix: "Parachains Authorities",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<ValidatorId>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " All authorities\' keys at the moment.",
                    ],
                },
                "Watermarks": StorageMetadata {
                    prefix: "Parachains Watermarks",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ParaId",
                        value: "T::BlockNumber",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The watermark heights of the parachains registered at present.",
                        " For every parachain, this is the block height from which all messages targeting",
                        " that parachain have been processed. Can be `None` only if the parachain doesn\'t exist.",
                    ],
                },
                "RelayDispatchQueueSize": StorageMetadata {
                    prefix: "Parachains RelayDispatchQueueSize",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "ParaId",
                        value: "(u32, u32)",
                        is_linked: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Size of the dispatch queues. Separated from actual data in order to avoid costly",
                        " decoding when checking receipt validity. First item in tuple is the count of messages",
                        "\tsecond if the total length (in bytes) of the message payloads.",
                    ],
                },
            },
            calls: {
                "set_heads": [
                    0,
                ],
            },
            events: {},
        },
        "RandomnessCollectiveFlip": ModuleMetadata {
            index: 1,
            name: "RandomnessCollectiveFlip",
            storage: {
                "RandomMaterial": StorageMetadata {
                    prefix: "RandomnessCollectiveFlip RandomMaterial",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<T::Hash>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " Series of block headers from the last 81 blocks that acts as random seed material. This",
                        " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                        " the oldest hash.",
                    ],
                },
            },
            calls: {},
            events: {},
        },
        "Identity": ModuleMetadata {
            index: 27,
            name: "Identity",
            storage: {
                "SuperOf": StorageMetadata {
                    prefix: "Sudo SuperOf",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "(T::AccountId, Data)",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " The super-identity of an alternative \"sub\" identity together with its name, within that",
                        " context. If the account is not some other account\'s sub-identity, then just `None`.",
                    ],
                },
                "IdentityOf": StorageMetadata {
                    prefix: "Sudo IdentityOf",
                    modifier: StorageEntryModifier::Optional,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "Registration<BalanceOf<T>>",
                        is_linked: false,
                    },
                    default: [
                        0,
                    ],
                    documentation: [
                        " Information that is pertinent to identify the entity behind an account.",
                    ],
                },
                "SubsOf": StorageMetadata {
                    prefix: "Sudo SubsOf",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Map {
                        hasher: StorageHasher::Blake2_256,
                        key: "T::AccountId",
                        value: "(BalanceOf<T>, Vec<T::AccountId>)",
                        is_linked: false,
                    },
                    default: [
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                    ],
                    documentation: [
                        " Alternative \"sub\" identities of this account.",
                        "",
                        " The first item is the deposit, the second is a vector of the accounts.",
                    ],
                },
                "Registrars": StorageMetadata {
                    prefix: "Sudo Registrars",
                    modifier: StorageEntryModifier::Default,
                    ty: StorageEntryType::Plain(
                        "Vec<Option<RegistrarInfo<BalanceOf<T>, T::AccountId>>>",
                    ),
                    default: [
                        0,
                    ],
                    documentation: [
                        " The set of registrars. Not expected to get very big as can only be added through a",
                        " special origin (likely a council motion).",
                        "",
                        " The index into this can be cast to `RegistrarIndex` to get a valid value.",
                    ],
                },
            },
            calls: {
                "kill_identity": [
                    10,
                ],
                "add_registrar": [
                    0,
                ],
                "request_judgement": [
                    4,
                ],
                "set_identity": [
                    1,
                ],
                "cancel_request": [
                    5,
                ],
                "set_subs": [
                    2,
                ],
                "clear_identity": [
                    3,
                ],
                "set_fields": [
                    8,
                ],
                "provide_judgement": [
                    9,
                ],
                "set_fee": [
                    6,
                ],
                "set_account_id": [
                    7,
                ],
            },
            events: {
                1: ModuleEventMetadata {
                    name: "IdentityCleared",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "Balance",
                        ),
                    },
                },
                3: ModuleEventMetadata {
                    name: "JudgementRequested",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "RegistrarIndex",
                        ),
                    },
                },
                6: ModuleEventMetadata {
                    name: "RegistrarAdded",
                    arguments: {
                        Primitive(
                            "RegistrarIndex",
                        ),
                    },
                },
                4: ModuleEventMetadata {
                    name: "JudgementUnrequested",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "RegistrarIndex",
                        ),
                    },
                },
                5: ModuleEventMetadata {
                    name: "JudgementGiven",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                        Primitive(
                            "RegistrarIndex",
                        ),
                    },
                },
                2: ModuleEventMetadata {
                    name: "IdentityKilled",
                    arguments: {
                        Primitive(
                            "Balance",
                        ),
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
                0: ModuleEventMetadata {
                    name: "IdentitySet",
                    arguments: {
                        Primitive(
                            "AccountId",
                        ),
                    },
                },
            },
        },
    },
    modules_by_event_index: {
        15: "Slots",
        1: "Indices",
        6: "Grandpa",
        5: "Session",
        7: "ImOnline",
        0: "System",
        12: "TechnicalMembership",
        9: "Council",
        10: "TechnicalCommittee",
        18: "Identity",
        8: "Democracy",
        3: "Staking",
        17: "Nicks",
        2: "Balances",
        13: "Treasury",
        11: "ElectionsPhragmen",
        14: "Claims",
        16: "Registrar",
        4: "Offences",
    },
}
[core/src/metadata.rs:109] &meta = RuntimeMetadataPrefixed(
    1635018093,
    RuntimeMetadata::V9(
        RuntimeMetadataV9 {
            modules: [
                ModuleMetadata {
                    name: "System",
                    storage: Some(
                        StorageMetadata {
                            prefix: "System",
                            entries: [
                                StorageEntryMetadata {
                                    name: "AccountNonce",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "T::Index",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Extrinsics nonce for accounts.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ExtrinsicCount",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Total extrinsics count for the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "AllExtrinsicsWeight",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "Weight",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Total weight for all extrinsics put together, for the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "AllExtrinsicsLen",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Total length (in bytes) for all extrinsics put together, for the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "BlockHash",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::BlockNumber",
                                        value: "T::Hash",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Map of block numbers to block hashes.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ExtrinsicData",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "u32",
                                        value: "Vec<u8>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Extrinsics data for the current block (maps an extrinsic\'s index to its data).",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Number",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::BlockNumber",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The current block number being processed. Set by `execute_block`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ParentHash",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::Hash",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Hash of the previous block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ExtrinsicsRoot",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::Hash",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Extrinsics root of the current block, also part of the block header.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Digest",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "DigestOf<T>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Digest of the current block, also part of the block header.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Events",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<EventRecord<T::Event, T::Hash>>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Events deposited for the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "EventCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "EventIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The number of events in the `Events<T>` list.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "EventTopics",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "()",
                                        key2: "T::Hash",
                                        value: "Vec<(T::BlockNumber, EventIndex)>",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                                        " of events in the `<Events<T>>` list.",
                                        "",
                                        " The first key serves no purpose. This field is declared as double_map just",
                                        " for convenience of using `remove_prefix`.",
                                        "",
                                        " All topic vectors have deterministic storage locations depending on the topic. This",
                                        " allows light-clients to leverage the changes trie storage tracking mechanism and",
                                        " in case of changes fetch the list of events of interest.",
                                        "",
                                        " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                                        " the `EventIndex` then in case if the topic has the same contents on the next block",
                                        " no notification will be triggered thus the event might be lost.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "fill_block",
                                arguments: [],
                                documentation: [
                                    " A big dispatch that will disallow any other transaction to be included.",
                                ],
                            },
                            FunctionMetadata {
                                name: "remark",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "_remark",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Make some on-chain remark.",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_heap_pages",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "pages",
                                        ty: "u64",
                                    },
                                ],
                                documentation: [
                                    " Set the number of pages in the WebAssembly environment\'s heap.",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_code",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Set the new code.",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_storage",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "items",
                                        ty: "Vec<KeyValue>",
                                    },
                                ],
                                documentation: [
                                    " Set some items of storage.",
                                ],
                            },
                            FunctionMetadata {
                                name: "kill_storage",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "keys",
                                        ty: "Vec<Key>",
                                    },
                                ],
                                documentation: [
                                    " Kill some items from storage.",
                                ],
                            },
                            FunctionMetadata {
                                name: "kill_prefix",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "prefix",
                                        ty: "Key",
                                    },
                                ],
                                documentation: [
                                    " Kill all storage items with a key that starts with the given prefix.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "ExtrinsicSuccess",
                                arguments: [
                                    "DispatchInfo",
                                ],
                                documentation: [
                                    " An extrinsic completed successfully.",
                                ],
                            },
                            EventMetadata {
                                name: "ExtrinsicFailed",
                                arguments: [
                                    "DispatchError",
                                    "DispatchInfo",
                                ],
                                documentation: [
                                    " An extrinsic failed.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [
                        ErrorMetadata {
                            name: "RequireSignedOrigin",
                            documentation: [],
                        },
                        ErrorMetadata {
                            name: "RequireRootOrigin",
                            documentation: [],
                        },
                        ErrorMetadata {
                            name: "RequireNoOrigin",
                            documentation: [],
                        },
                    ],
                },
                ModuleMetadata {
                    name: "RandomnessCollectiveFlip",
                    storage: Some(
                        StorageMetadata {
                            prefix: "RandomnessCollectiveFlip",
                            entries: [
                                StorageEntryMetadata {
                                    name: "RandomMaterial",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::Hash>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Series of block headers from the last 81 blocks that acts as random seed material. This",
                                        " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                                        " the oldest hash.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: None,
                    event: None,
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Babe",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Babe",
                            entries: [
                                StorageEntryMetadata {
                                    name: "EpochIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u64",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Current epoch index.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Authorities",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(AuthorityId, BabeAuthorityWeight)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Current epoch authorities.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "GenesisSlot",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u64",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The slot at which the first epoch actually started. This is 0",
                                        " until the first block of the chain.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentSlot",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u64",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Current slot number.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Randomness",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "[u8; 32]",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The epoch randomness for the *current* epoch.",
                                        "",
                                        " # Security",
                                        "",
                                        " This MUST NOT be used for gambling, as it can be influenced by a",
                                        " malicious validator in the short term. It MAY be used in many",
                                        " cryptographic protocols, however, so long as one remembers that this",
                                        " (like everything else on-chain) it is public. For example, it can be",
                                        " used where a number is needed that cannot have been chosen by an",
                                        " adversary, for purposes such as public-coin zero-knowledge proofs.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NextRandomness",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "[u8; 32]",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Next epoch randomness.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SegmentIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Randomness under construction.",
                                        "",
                                        " We make a tradeoff between storage accesses and list length.",
                                        " We store the under-construction randomness in segments of up to",
                                        " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                                        "",
                                        " Once a segment reaches this length, we begin the next one.",
                                        " We reset all segments and return to `0` at the beginning of every",
                                        " epoch.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "UnderConstruction",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "u32",
                                        value: "Vec<[u8; 32]>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [],
                                },
                                StorageEntryMetadata {
                                    name: "Initialized",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "MaybeVrf",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Temporary value (cleared at block finalization) which is `Some`",
                                        " if per-block initialization has already been called for current block.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [],
                    ),
                    event: None,
                    constants: [
                        ModuleConstantMetadata {
                            name: "EpochDuration",
                            ty: "u64",
                            value: [
                                88,
                                2,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The number of **slots** that an epoch takes. We couple sessions to",
                                " epochs, i.e. we start a new session once the new epoch begins.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "ExpectedBlockTime",
                            ty: "T::Moment",
                            value: [
                                112,
                                23,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The expected average block time at which BABE should be creating",
                                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                                " what the expected average block time should be based on the slot",
                                " duration and the security parameter `c` (where `1 - c` represents",
                                " the probability of a slot being empty).",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Timestamp",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Timestamp",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Now",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::Moment",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Current time for the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DidUpdate",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "bool",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Did the timestamp get updated in this block?",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "now",
                                        ty: "Compact<T::Moment>",
                                    },
                                ],
                                documentation: [
                                    " Set the current time.",
                                    "",
                                    " This call should be invoked exactly once per block. It will panic at the finalization",
                                    " phase, if this call hasn\'t been invoked by that time.",
                                    "",
                                    " The timestamp should be greater than the previous one by the amount specified by",
                                    " `MinimumPeriod`.",
                                    "",
                                    " The dispatch origin for this call must be `Inherent`.",
                                ],
                            },
                        ],
                    ),
                    event: None,
                    constants: [
                        ModuleConstantMetadata {
                            name: "MinimumPeriod",
                            ty: "T::Moment",
                            value: [
                                184,
                                11,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The minimum period between blocks. Beware that this is different to the *expected* period",
                                " that the block production apparatus provides. Your chosen consensus system will generally",
                                " work with this to determine a sensible block time. e.g. For Aura, it will be double this",
                                " period on default settings.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Indices",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Indices",
                            entries: [
                                StorageEntryMetadata {
                                    name: "NextEnumSet",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::AccountIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The next free enumeration set.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "EnumSet",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountIndex",
                                        value: "Vec<T::AccountId>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The enumeration sets.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewAccountIndex",
                                arguments: [
                                    "AccountId",
                                    "AccountIndex",
                                ],
                                documentation: [
                                    " A new account index was assigned.",
                                    "",
                                    " This event is not triggered when an existing index is reassigned",
                                    " to another `AccountId`.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Balances",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Balances",
                            entries: [
                                StorageEntryMetadata {
                                    name: "TotalIssuance",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::Balance",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The total units issued in the system.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Vesting",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "VestingSchedule<T::Balance, T::BlockNumber>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Information regarding the vesting of a given account.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "FreeBalance",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "T::Balance",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The \'free\' balance of a given account.",
                                        "",
                                        " This is the only balance that matters in terms of most operations on tokens. It",
                                        " alone is used to determine the balance when in the contract execution environment. When this",
                                        " balance falls below the value of `ExistentialDeposit`, then the \'current account\' is",
                                        " deleted: specifically `FreeBalance`. Further, the `OnFreeBalanceZero` callback",
                                        " is invoked, giving a chance to external modules to clean up data associated with",
                                        " the deleted account.",
                                        "",
                                        " `system::AccountNonce` is also deleted if `ReservedBalance` is also zero (it also gets",
                                        " collapsed to zero if it ever becomes less than `ExistentialDeposit`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReservedBalance",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "T::Balance",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The amount of the balance of a given account that is externally reserved; this can still get",
                                        " slashed, but gets slashed last of all.",
                                        "",
                                        " This balance is a \'reserve\' balance that other subsystems use in order to set aside tokens",
                                        " that are still \'owned\' by the account holder, but which are suspendable.",
                                        "",
                                        " When this balance falls below the value of `ExistentialDeposit`, then this \'reserve account\'",
                                        " is deleted: specifically, `ReservedBalance`.",
                                        "",
                                        " `system::AccountNonce` is also deleted if `FreeBalance` is also zero (it also gets",
                                        " collapsed to zero if it ever becomes less than `ExistentialDeposit`.)",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Locks",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "Vec<BalanceLock<T::Balance, T::BlockNumber>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Any liquidity locks on some account balances.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "transfer",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "dest",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<T::Balance>",
                                    },
                                ],
                                documentation: [
                                    " Transfer some liquid free balance to another account.",
                                    "",
                                    " `transfer` will set the `FreeBalance` of the sender and receiver.",
                                    " It will decrease the total issuance of the system by the `TransferFee`.",
                                    " If the sender\'s account is below the existential deposit as a result",
                                    " of the transfer, the account will be reaped.",
                                    "",
                                    " The dispatch origin for this call must be `Signed` by the transactor.",
                                    "",
                                    " # <weight>",
                                    " - Dependent on arguments but not critical, given proper implementations for",
                                    "   input config types. See related functions below.",
                                    " - It contains a limited number of reads and writes internally and no complex computation.",
                                    "",
                                    " Related functions:",
                                    "",
                                    "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                                    "   - Transferring balances to accounts that did not exist before will cause",
                                    "      `T::OnNewAccount::on_new_account` to be called.",
                                    "   - Removing enough funds from an account will trigger",
                                    "     `T::DustRemoval::on_unbalanced` and `T::OnFreeBalanceZero::on_free_balance_zero`.",
                                    "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                                    "     check that the transfer will not kill the origin account.",
                                    "",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_balance",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "who",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "new_free",
                                        ty: "Compact<T::Balance>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "new_reserved",
                                        ty: "Compact<T::Balance>",
                                    },
                                ],
                                documentation: [
                                    " Set the balances of a given account.",
                                    "",
                                    " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                                    " also decrease the total issuance of the system (`TotalIssuance`).",
                                    " If the new free or reserved balance is below the existential deposit,",
                                    " it will reset the account nonce (`system::AccountNonce`).",
                                    "",
                                    " The dispatch origin for this call is `root`.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments.",
                                    " - Contains a limited number of reads and writes.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_transfer",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "source",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "dest",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<T::Balance>",
                                    },
                                ],
                                documentation: [
                                    " Exactly as `transfer`, except the origin must be root and the source account may be",
                                    " specified.",
                                ],
                            },
                            FunctionMetadata {
                                name: "transfer_keep_alive",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "dest",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<T::Balance>",
                                    },
                                ],
                                documentation: [
                                    " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                                    " origin account.",
                                    "",
                                    " 99% of the time you want [`transfer`] instead.",
                                    "",
                                    " [`transfer`]: struct.Module.html#method.transfer",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewAccount",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " A new account was created.",
                                ],
                            },
                            EventMetadata {
                                name: "ReapedAccount",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " An account was reaped.",
                                ],
                            },
                            EventMetadata {
                                name: "Transfer",
                                arguments: [
                                    "AccountId",
                                    "AccountId",
                                    "Balance",
                                    "Balance",
                                ],
                                documentation: [
                                    " Transfer succeeded (from, to, value, fees).",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "ExistentialDeposit",
                            ty: "T::Balance",
                            value: [
                                0,
                                228,
                                11,
                                84,
                                2,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The minimum amount required to keep an account open.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "TransferFee",
                            ty: "T::Balance",
                            value: [
                                0,
                                225,
                                245,
                                5,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The fee required to make a transfer.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "CreationFee",
                            ty: "T::Balance",
                            value: [
                                0,
                                225,
                                245,
                                5,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The fee required to create an account.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "TransactionPayment",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Balances",
                            entries: [
                                StorageEntryMetadata {
                                    name: "NextFeeMultiplier",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Multiplier",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [],
                                },
                            ],
                        },
                    ),
                    calls: None,
                    event: None,
                    constants: [
                        ModuleConstantMetadata {
                            name: "TransactionBaseFee",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                225,
                                245,
                                5,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The fee to be paid for making a transaction; the base.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "TransactionByteFee",
                            ty: "BalanceOf<T>",
                            value: [
                                64,
                                66,
                                15,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The fee to be paid for making a transaction; the per-byte portion.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Authorship",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Authorship",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Uncles",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<UncleEntryItem<T::BlockNumber, T::Hash, T::AccountId>>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Uncles",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Author",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "T::AccountId",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Author of current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DidSetUncles",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "bool",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Whether uncles were already set in this block.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_uncles",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new_uncles",
                                        ty: "Vec<T::Header>",
                                    },
                                ],
                                documentation: [
                                    " Provide a set of uncles.",
                                ],
                            },
                        ],
                    ),
                    event: None,
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Staking",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Staking",
                            entries: [
                                StorageEntryMetadata {
                                    name: "ValidatorCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The ideal number of staking participants.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "MinimumValidatorCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        4,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Minimum number of staking participants before emergency conditions are imposed.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Invulnerables",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Any validators that may never be slashed or forcibly kicked. It\'s a Vec since they\'re",
                                        " easy to initialize and the performance hit is minimal (we expect no more than four",
                                        " invulnerables) and restricted to testnets.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Bonded",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "T::AccountId",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Map from all locked \"stash\" accounts to the controller account.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Ledger",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "StakingLedger<T::AccountId, BalanceOf<T>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Map from all (unlocked) \"controller\" accounts to the info regarding the staking.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Payee",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "RewardDestination",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Where the reward payment should be made. Keyed by stash.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Validators",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "ValidatorPrefs",
                                        is_linked: true,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The map from (wannabe) validator stash key to the preferences of that validator.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Nominators",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "Nominations<T::AccountId>",
                                        is_linked: true,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The map from nominator stash key to the set of stash keys of all validators to nominate.",
                                        "",
                                        " NOTE: is private so that we can ensure upgraded before all typical accesses.",
                                        " Direct storage APIs can still bypass this protection.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Stakers",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "Exposure<T::AccountId, BalanceOf<T>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Nominators for a particular account that is in action right now. You can\'t iterate",
                                        " through validators here, but you can find them in the Session module.",
                                        "",
                                        " This is keyed by the stash account.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentElected",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The currently elected validator set keyed by stash account ID.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentEra",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "EraIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The current era index.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentEraStart",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "MomentOf<T>",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The start of the current era.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentEraStartSessionIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "SessionIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The session index at which the current era started.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentEraPointsEarned",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "EraPoints",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Rewards for the current era. Using indices of current elected set.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SlotStake",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "BalanceOf<T>",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The amount of balance actively at stake for each validator slot, currently.",
                                        "",
                                        " This is used to derive rewards and punishments.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ForceEra",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Forcing",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " True if the next session change will be a new era regardless of index.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SlashRewardFraction",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Perbill",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The percentage of the slash that is distributed to reporters.",
                                        "",
                                        " The rest of the slashed value is handled by the `Slash`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CanceledSlashPayout",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "BalanceOf<T>",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The amount of currency given to reporters of a slash event which was",
                                        " canceled by extraordinary circumstances (e.g. governance).",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "UnappliedSlashes",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "EraIndex",
                                        value: "Vec<UnappliedSlash<T::AccountId, BalanceOf<T>>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " All unapplied slashes that are queued for later.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "BondedEras",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(EraIndex, SessionIndex)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " A mapping from still-bonded eras to the first session index of that era.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ValidatorSlashInEra",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "EraIndex",
                                        key2: "T::AccountId",
                                        value: "(Perbill, BalanceOf<T>)",
                                        key2_hasher: StorageHasher::Twox128,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " All slashing events on validators, mapped by era to the highest slash proportion",
                                        " and slash value of the era.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NominatorSlashInEra",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "EraIndex",
                                        key2: "T::AccountId",
                                        value: "BalanceOf<T>",
                                        key2_hasher: StorageHasher::Twox128,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " All slashing events on nominators, mapped by era to the highest slash value of the era.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SlashingSpans",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "slashing::SlashingSpans",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Slashing spans for stash accounts.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SpanSlash",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "(T::AccountId, slashing::SpanIndex)",
                                        value: "slashing::SpanRecord<BalanceOf<T>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Records information about the maximum slash of a stash within a slashing span,",
                                        " as well as how much reward has been paid out.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "EarliestUnappliedSlash",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "EraIndex",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The earliest era for which we have a pending, unapplied slash.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "StorageVersion",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The version of storage for upgrade.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "bond",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "controller",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "payee",
                                        ty: "RewardDestination",
                                    },
                                ],
                                documentation: [
                                    " Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                                    " be the account that controls it.",
                                    "",
                                    " `value` must be more than the `minimum_balance` specified by `T::Currency`.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the stash account.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Moderate complexity.",
                                    " - O(1).",
                                    " - Three extra DB entries.",
                                    "",
                                    " NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned unless",
                                    " the `origin` falls below _existential deposit_ and gets removed as dust.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "bond_extra",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "max_additional",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                                    " for staking.",
                                    "",
                                    " Use this if there are additional funds in your stash account that you wish to bond.",
                                    " Unlike [`bond`] or [`unbond`] this function does not impose any limitation on the amount",
                                    " that can be added.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Insignificant complexity.",
                                    " - O(1).",
                                    " - One DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "unbond",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                                    " period ends. If this leaves an amount actively bonded less than",
                                    " T::Currency::minimum_balance(), then it is increased to the full amount.",
                                    "",
                                    " Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                                    " the funds out of management ready for transfer.",
                                    "",
                                    " No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                                    " can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
                                    " to be called first to remove some of the chunks (if possible).",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " See also [`Call::withdraw_unbonded`].",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Limited but potentially exploitable complexity.",
                                    " - Contains a limited number of reads.",
                                    " - Each call (requires the remainder of the bonded balance to be above `minimum_balance`)",
                                    "   will cause a new entry to be inserted into a vector (`Ledger.unlocking`) kept in storage.",
                                    "   The only way to clean the aforementioned storage item is also user-controlled via `withdraw_unbonded`.",
                                    " - One DB entry.",
                                    " </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "withdraw_unbonded",
                                arguments: [],
                                documentation: [
                                    " Remove any unlocked chunks from the `unlocking` queue from our management.",
                                    "",
                                    " This essentially frees up that balance to be used by the stash account to do",
                                    " whatever it wants.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " See also [`Call::unbond`].",
                                    "",
                                    " # <weight>",
                                    " - Could be dependent on the `origin` argument and how much `unlocking` chunks exist.",
                                    "  It implies `consolidate_unlocked` which loops over `Ledger.unlocking`, which is",
                                    "  indirectly user-controlled. See [`unbond`] for more detail.",
                                    " - Contains a limited number of reads, yet the size of which could be large based on `ledger`.",
                                    " - Writes are limited to the `origin` account key.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "validate",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "prefs",
                                        ty: "ValidatorPrefs",
                                    },
                                ],
                                documentation: [
                                    " Declare the desire to validate for the origin controller.",
                                    "",
                                    " Effects will be felt at the beginning of the next era.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Insignificant complexity.",
                                    " - Contains a limited number of reads.",
                                    " - Writes are limited to the `origin` account key.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "nominate",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "targets",
                                        ty: "Vec<<T::Lookup as StaticLookup>::Source>",
                                    },
                                ],
                                documentation: [
                                    " Declare the desire to nominate `targets` for the origin controller.",
                                    "",
                                    " Effects will be felt at the beginning of the next era.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " # <weight>",
                                    " - The transaction\'s complexity is proportional to the size of `targets`,",
                                    " which is capped at `MAX_NOMINATIONS`.",
                                    " - Both the reads and writes follow a similar pattern.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "chill",
                                arguments: [],
                                documentation: [
                                    " Declare no desire to either validate or nominate.",
                                    "",
                                    " Effects will be felt at the beginning of the next era.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Insignificant complexity.",
                                    " - Contains one read.",
                                    " - Writes are limited to the `origin` account key.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_payee",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "payee",
                                        ty: "RewardDestination",
                                    },
                                ],
                                documentation: [
                                    " (Re-)set the payment target for a controller.",
                                    "",
                                    " Effects will be felt at the beginning of the next era.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Insignificant complexity.",
                                    " - Contains a limited number of reads.",
                                    " - Writes are limited to the `origin` account key.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_controller",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "controller",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " (Re-)set the controller of a stash.",
                                    "",
                                    " Effects will be felt at the beginning of the next era.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                                    "",
                                    " # <weight>",
                                    " - Independent of the arguments. Insignificant complexity.",
                                    " - Contains a limited number of reads.",
                                    " - Writes are limited to the `origin` account key.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_validator_count",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new",
                                        ty: "Compact<u32>",
                                    },
                                ],
                                documentation: [
                                    " The ideal number of validators.",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_no_eras",
                                arguments: [],
                                documentation: [
                                    " Force there to be no new eras indefinitely.",
                                    "",
                                    " # <weight>",
                                    " - No arguments.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_new_era",
                                arguments: [],
                                documentation: [
                                    " Force there to be a new era at the end of the next session. After this, it will be",
                                    " reset to normal (non-forced) behaviour.",
                                    "",
                                    " # <weight>",
                                    " - No arguments.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_invulnerables",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "validators",
                                        ty: "Vec<T::AccountId>",
                                    },
                                ],
                                documentation: [
                                    " Set the validators who cannot be slashed (if any).",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_unstake",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "stash",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Force a current staker to become completely unstaked, immediately.",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_new_era_always",
                                arguments: [],
                                documentation: [
                                    " Force there to be a new era at the end of sessions indefinitely.",
                                    "",
                                    " # <weight>",
                                    " - One storage write",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "cancel_deferred_slash",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "era",
                                        ty: "EraIndex",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "slash_indices",
                                        ty: "Vec<u32>",
                                    },
                                ],
                                documentation: [
                                    " Cancel enactment of a deferred slash. Can be called by either the root origin or",
                                    " the `T::SlashCancelOrigin`.",
                                    " passing the era and indices of the slashes for that era to kill.",
                                    "",
                                    " # <weight>",
                                    " - One storage write.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Reward",
                                arguments: [
                                    "Balance",
                                    "Balance",
                                ],
                                documentation: [
                                    " All validators have been rewarded by the first balance; the second is the remainder",
                                    " from the maximum amount of reward.",
                                ],
                            },
                            EventMetadata {
                                name: "Slash",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " One validator (and its nominators) has been slashed by the given amount.",
                                ],
                            },
                            EventMetadata {
                                name: "OldSlashingReportDiscarded",
                                arguments: [
                                    "SessionIndex",
                                ],
                                documentation: [
                                    " An old slashing report from a prior era was discarded because it could",
                                    " not be processed.",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "SessionsPerEra",
                            ty: "SessionIndex",
                            value: [
                                6,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " Number of sessions per era.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "BondingDuration",
                            ty: "EraIndex",
                            value: [
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " Number of eras that staked funds must remain bonded for.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Offences",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Offences",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Reports",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ReportIdOf<T>",
                                        value: "OffenceDetails<T::AccountId, T::IdentificationTuple>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The primary structure that holds all offence records keyed by report identifiers.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ConcurrentReportsIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "Kind",
                                        key2: "OpaqueTimeSlot",
                                        value: "Vec<ReportIdOf<T>>",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " A vector of reports of the same kind that happened at the same time slot.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReportsByKindIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "Kind",
                                        value: "Vec<u8>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Enumerates all reports of a kind along with the time they happened.",
                                        "",
                                        " All reports are sorted by the time of offence.",
                                        "",
                                        " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                                        " different types are not supported at the moment so we are doing the manual serialization.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Offence",
                                arguments: [
                                    "Kind",
                                    "OpaqueTimeSlot",
                                ],
                                documentation: [
                                    " There is an offence reported of the given `kind` happened at the `session_index` and",
                                    " (kind-specific) time slot. This event is not deposited for duplicate slashes.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Session",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Session",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Validators",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::ValidatorId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current set of validators.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentIndex",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "SessionIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Current index of the session.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "QueuedChanged",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "bool",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " True if the underlying economic identities or weighting behind the validators",
                                        " has changed in the queued validator set.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "QueuedKeys",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(T::ValidatorId, T::Keys)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The queued keys for the next session. When the next session begins, these keys",
                                        " will be used to determine the validator\'s session keys.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DisabledValidators",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<u32>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Indices of disabled validators.",
                                        "",
                                        " The set is cleared when `on_session_ending` returns a new set of identities.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NextKeys",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Twox64Concat,
                                        key1: "Vec<u8>",
                                        key2: "T::ValidatorId",
                                        value: "T::Keys",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The next session keys for a validator.",
                                        "",
                                        " The first key is always `DEDUP_KEY_PREFIX` to have all the data in the same branch of",
                                        " the trie. Having all data in the same branch should prevent slowing down other queries.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "KeyOwner",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Twox64Concat,
                                        key1: "Vec<u8>",
                                        key2: "(KeyTypeId, Vec<u8>)",
                                        value: "T::ValidatorId",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The owner of a key. The second key is the `KeyTypeId` + the encoded key.",
                                        "",
                                        " The first key is always `DEDUP_KEY_PREFIX` to have all the data in the same branch of",
                                        " the trie. Having all data in the same branch should prevent slowing down other queries.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_keys",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "keys",
                                        ty: "T::Keys",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "proof",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Sets the session key(s) of the function caller to `key`.",
                                    " Allows an account to set its session key prior to becoming a validator.",
                                    " This doesn\'t take effect until the next session.",
                                    "",
                                    " The dispatch origin of this function must be signed.",
                                    "",
                                    " # <weight>",
                                    " - O(log n) in number of accounts.",
                                    " - One extra DB entry.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewSession",
                                arguments: [
                                    "SessionIndex",
                                ],
                                documentation: [
                                    " New session has happened. Note that the argument is the session index, not the block",
                                    " number as the type might suggest.",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "DEDUP_KEY_PREFIX",
                            ty: "&[u8]",
                            value: [
                                52,
                                58,
                                115,
                                101,
                                115,
                                115,
                                105,
                                111,
                                110,
                                58,
                                107,
                                101,
                                121,
                                115,
                            ],
                            documentation: [
                                " Used as first key for `NextKeys` and `KeyOwner` to put all the data into the same branch",
                                " of the trie.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "FinalityTracker",
                    storage: None,
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "final_hint",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "hint",
                                        ty: "Compact<T::BlockNumber>",
                                    },
                                ],
                                documentation: [
                                    " Hint that the author of this block thinks the best finalized",
                                    " block is the given number.",
                                ],
                            },
                        ],
                    ),
                    event: None,
                    constants: [
                        ModuleConstantMetadata {
                            name: "WindowSize",
                            ty: "T::BlockNumber",
                            value: [
                                101,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The number of recent samples to keep from this chain. Default is 101.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "ReportLatency",
                            ty: "T::BlockNumber",
                            value: [
                                232,
                                3,
                                0,
                                0,
                            ],
                            documentation: [
                                " The delay after which point things become suspicious. Default is 1000.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Grandpa",
                    storage: Some(
                        StorageMetadata {
                            prefix: "GrandpaFinality",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Authorities",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "AuthorityList",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " DEPRECATED",
                                        "",
                                        " This used to store the current authority set, which has been migrated to the well-known",
                                        " GRANDPA_AUTHORITES_KEY unhashed key.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "State",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "StoredState<T::BlockNumber>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " State of the current authority set.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "PendingChange",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "StoredPendingChange<T::BlockNumber>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Pending change: (signaled at, scheduled change).",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NextForced",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "T::BlockNumber",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " next block number where we can force a change.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Stalled",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "(T::BlockNumber, T::BlockNumber)",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " `true` if we are currently stalled.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "CurrentSetId",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "SetId",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The number of changes (both in terms of keys and underlying economic responsibilities)",
                                        " in the \"set\" of Grandpa validators from genesis.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SetIdSession",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "SetId",
                                        value: "SessionIndex",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " A mapping from grandpa set ID to the index of the *most recent* session for which its members were responsible.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "report_misbehavior",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "_report",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Report some misbehavior.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewAuthorities",
                                arguments: [
                                    "AuthorityList",
                                ],
                                documentation: [
                                    " New authority set has been applied.",
                                ],
                            },
                            EventMetadata {
                                name: "Paused",
                                arguments: [],
                                documentation: [
                                    " Current authority set has been paused.",
                                ],
                            },
                            EventMetadata {
                                name: "Resumed",
                                arguments: [],
                                documentation: [
                                    " Current authority set has been resumed.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "ImOnline",
                    storage: Some(
                        StorageMetadata {
                            prefix: "ImOnline",
                            entries: [
                                StorageEntryMetadata {
                                    name: "GossipAt",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::BlockNumber",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The block number when we should gossip.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Keys",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AuthorityId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current set of keys that may issue a heartbeat.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReceivedHeartbeats",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "SessionIndex",
                                        key2: "AuthIndex",
                                        value: "Vec<u8>",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " For each session index, we keep a mapping of `AuthIndex`",
                                        " to `offchain::OpaqueNetworkState`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "AuthoredBlocks",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "SessionIndex",
                                        key2: "T::ValidatorId",
                                        value: "u32",
                                        key2_hasher: StorageHasher::Blake2_256,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " For each session index, we keep a mapping of `T::ValidatorId` to the",
                                        " number of blocks authored by the given authority.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "heartbeat",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "heartbeat",
                                        ty: "Heartbeat<T::BlockNumber>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "_signature",
                                        ty: "<T::AuthorityId as RuntimeAppPublic>::Signature",
                                    },
                                ],
                                documentation: [],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "HeartbeatReceived",
                                arguments: [
                                    "AuthorityId",
                                ],
                                documentation: [
                                    " A new heartbeat was received from `AuthorityId`",
                                ],
                            },
                            EventMetadata {
                                name: "AllGood",
                                arguments: [],
                                documentation: [
                                    " At the end of the session, no offence was committed.",
                                ],
                            },
                            EventMetadata {
                                name: "SomeOffline",
                                arguments: [
                                    "Vec<IdentificationTuple>",
                                ],
                                documentation: [
                                    " At the end of the session, at least once validator was found to be offline.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "AuthorityDiscovery",
                    storage: None,
                    calls: Some(
                        [],
                    ),
                    event: None,
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Democracy",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Democracy",
                            entries: [
                                StorageEntryMetadata {
                                    name: "PublicPropCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "PropIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The number of (public) proposals that have been made so far.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "PublicProps",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(PropIndex, T::Proposal, T::AccountId)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The public proposals. Unsorted.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DepositOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "PropIndex",
                                        value: "(BalanceOf<T>, Vec<T::AccountId>)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Those who have locked a deposit.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReferendumCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "ReferendumIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The next free referendum index, aka the number of referenda started so far.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NextTally",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "ReferendumIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The next referendum index that should be tallied.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReferendumInfoOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ReferendumIndex",
                                        value: "(ReferendumInfo<T::BlockNumber, T::Proposal>)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Information concerning any given referendum.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DispatchQueue",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::BlockNumber",
                                        value: "Vec<Option<(T::Proposal, ReferendumIndex)>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Queue of successful referenda to be dispatched.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "VotersFor",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ReferendumIndex",
                                        value: "Vec<T::AccountId>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Get the voters for the current proposal.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "VoteOf",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "(ReferendumIndex, T::AccountId)",
                                        value: "Vote",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Get the vote in a given referendum of a particular voter. The result is meaningful only",
                                        " if `voters_for` includes the voter when called with the referendum (you\'ll get the",
                                        " default `Vote` value otherwise). If you don\'t want to check `voters_for`, then you can",
                                        " also check for simple existence with `VoteOf::exists` first.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Proxy",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "T::AccountId",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Who is able to vote for whom. Value is the fund-holding account, key is the",
                                        " vote-transaction-sending account.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Delegations",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "(T::AccountId, Conviction)",
                                        is_linked: true,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Get the account (and lock periods) to which another account is delegating vote.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "LastTabledWasExternal",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "bool",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " True if the last referendum tabled was submitted externally. False if it was a public",
                                        " proposal.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NextExternal",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "(T::Proposal, VoteThreshold)",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The referendum to be tabled whenever it would be valid to table an external proposal.",
                                        " This happens when a referendum needs to be tabled and one of two conditions are met:",
                                        " - `LastTabledWasExternal` is `false`; or",
                                        " - `PublicProps` is empty.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Blacklist",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "(T::BlockNumber, Vec<T::AccountId>)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                                        " (until when it may not be resubmitted) and who vetoed it.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Cancellations",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "bool",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Record of all proposals that have been subject to emergency cancellation.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "propose",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<T::Proposal>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Propose a sensitive action to be taken.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - Two DB changes, one DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "second",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Compact<PropIndex>",
                                    },
                                ],
                                documentation: [
                                    " Propose a sensitive action to be taken.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - One DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "vote",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "ref_index",
                                        ty: "Compact<ReferendumIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "vote",
                                        ty: "Vote",
                                    },
                                ],
                                documentation: [
                                    " Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                                    " otherwise it is a vote to keep the status quo.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - One DB change, one DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "proxy_vote",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "ref_index",
                                        ty: "Compact<ReferendumIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "vote",
                                        ty: "Vote",
                                    },
                                ],
                                documentation: [
                                    " Vote in a referendum on behalf of a stash. If `vote.is_aye()`, the vote is to enact",
                                    " the proposal;  otherwise it is a vote to keep the status quo.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - One DB change, one DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "emergency_cancel",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "ref_index",
                                        ty: "ReferendumIndex",
                                    },
                                ],
                                documentation: [
                                    " Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                                    " referendum.",
                                ],
                            },
                            FunctionMetadata {
                                name: "external_propose",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<T::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " Schedule a referendum to be tabled once it is legal to schedule an external",
                                    " referendum.",
                                ],
                            },
                            FunctionMetadata {
                                name: "external_propose_majority",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<T::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                                    " an external referendum.",
                                    "",
                                    " Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                                    " pre-scheduled `external_propose` call.",
                                ],
                            },
                            FunctionMetadata {
                                name: "external_propose_default",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<T::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                                    " schedule an external referendum.",
                                    "",
                                    " Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                                    " pre-scheduled `external_propose` call.",
                                ],
                            },
                            FunctionMetadata {
                                name: "fast_track",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_hash",
                                        ty: "T::Hash",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "voting_period",
                                        ty: "T::BlockNumber",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "delay",
                                        ty: "T::BlockNumber",
                                    },
                                ],
                                documentation: [
                                    " Schedule the currently externally-proposed majority-carries referendum to be tabled",
                                    " immediately. If there is no externally-proposed referendum currently, or if there is one",
                                    " but it is not a majority-carries referendum then it fails.",
                                    "",
                                    " - `proposal_hash`: The hash of the current external proposal.",
                                    " - `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                                    "   `EmergencyVotingPeriod` if too low.",
                                    " - `delay`: The number of block after voting has ended in approval and this should be",
                                    "   enacted. This doesn\'t have a minimum amount.",
                                ],
                            },
                            FunctionMetadata {
                                name: "veto_external",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_hash",
                                        ty: "T::Hash",
                                    },
                                ],
                                documentation: [
                                    " Veto and blacklist the external proposal hash.",
                                ],
                            },
                            FunctionMetadata {
                                name: "cancel_referendum",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "ref_index",
                                        ty: "Compact<ReferendumIndex>",
                                    },
                                ],
                                documentation: [
                                    " Remove a referendum.",
                                ],
                            },
                            FunctionMetadata {
                                name: "cancel_queued",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "when",
                                        ty: "Compact<T::BlockNumber>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "which",
                                        ty: "Compact<u32>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "what",
                                        ty: "Compact<ReferendumIndex>",
                                    },
                                ],
                                documentation: [
                                    " Cancel a proposal queued for enactment.",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_proxy",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proxy",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Specify a proxy. Called by the stash.",
                                    "",
                                    " # <weight>",
                                    " - One extra DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "resign_proxy",
                                arguments: [],
                                documentation: [
                                    " Clear the proxy. Called by the proxy.",
                                    "",
                                    " # <weight>",
                                    " - One DB clear.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "remove_proxy",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proxy",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Clear the proxy. Called by the stash.",
                                    "",
                                    " # <weight>",
                                    " - One DB clear.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "delegate",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "to",
                                        ty: "T::AccountId",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "conviction",
                                        ty: "Conviction",
                                    },
                                ],
                                documentation: [
                                    " Delegate vote.",
                                    "",
                                    " # <weight>",
                                    " - One extra DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "undelegate",
                                arguments: [],
                                documentation: [
                                    " Undelegate vote.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Proposed",
                                arguments: [
                                    "PropIndex",
                                    "Balance",
                                ],
                                documentation: [],
                            },
                            EventMetadata {
                                name: "Tabled",
                                arguments: [
                                    "PropIndex",
                                    "Balance",
                                    "Vec<AccountId>",
                                ],
                                documentation: [],
                            },
                            EventMetadata {
                                name: "ExternalTabled",
                                arguments: [],
                                documentation: [],
                            },
                            EventMetadata {
                                name: "Started",
                                arguments: [
                                    "ReferendumIndex",
                                    "VoteThreshold",
                                ],
                                documentation: [],
                            },
                            EventMetadata {
                                name: "Passed",
                                arguments: [
                                    "ReferendumIndex",
                                ],
                                documentation: [],
                            },
                            EventMetadata {
                                name: "NotPassed",
                                arguments: [
                                    "ReferendumIndex",
                                ],
                                documentation: [],
                            },
                            EventMetadata {
                                name: "Cancelled",
                                arguments: [
                                    "ReferendumIndex",
                                ],
                                documentation: [],
                            },
                            EventMetadata {
                                name: "Executed",
                                arguments: [
                                    "ReferendumIndex",
                                    "bool",
                                ],
                                documentation: [],
                            },
                            EventMetadata {
                                name: "Delegated",
                                arguments: [
                                    "AccountId",
                                    "AccountId",
                                ],
                                documentation: [],
                            },
                            EventMetadata {
                                name: "Undelegated",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [],
                            },
                            EventMetadata {
                                name: "Vetoed",
                                arguments: [
                                    "AccountId",
                                    "Hash",
                                    "BlockNumber",
                                ],
                                documentation: [],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "EnactmentPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                0,
                                194,
                                1,
                                0,
                            ],
                            documentation: [
                                " The minimum period of locking and the period between a proposal being approved and enacted.",
                                "",
                                " It should generally be a little more than the unstake period to ensure that",
                                " voting stakers have an opportunity to remove themselves from the system in the case where",
                                " they are on the losing side of a vote.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "LaunchPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                192,
                                137,
                                1,
                                0,
                            ],
                            documentation: [
                                " How often (in blocks) new public referenda are launched.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "VotingPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                192,
                                137,
                                1,
                                0,
                            ],
                            documentation: [
                                " How often (in blocks) to check for new votes.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "MinimumDeposit",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                16,
                                165,
                                212,
                                232,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The minimum amount to be used as a deposit for a public referendum proposal.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "EmergencyVotingPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                88,
                                2,
                                0,
                                0,
                            ],
                            documentation: [
                                " Minimum voting period allowed for an emergency referendum.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "CooloffPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                192,
                                137,
                                1,
                                0,
                            ],
                            documentation: [
                                " Period in blocks where an external proposal may not be re-submitted after being vetoed.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Council",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Instance1Collective",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Proposals",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::Hash>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The hashes of the active proposals.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ProposalOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "<T as Trait<I>>::Proposal",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Actual proposal for a given hash, if it\'s current.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Voting",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "Votes<T::AccountId>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Votes on a given proposal, if it is ongoing.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ProposalCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Proposals so far.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Members",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current members of the collective. This is stored sorted (just by value).",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_members",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new_members",
                                        ty: "Vec<T::AccountId>",
                                    },
                                ],
                                documentation: [
                                    " Set the collective\'s membership manually to `new_members`. Be nice to the chain and",
                                    " provide it pre-sorted.",
                                    "",
                                    " Requires root origin.",
                                ],
                            },
                            FunctionMetadata {
                                name: "execute",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<<T as Trait<I>>::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " Dispatch a proposal from a member using the `Member` origin.",
                                    "",
                                    " Origin must be a member of the collective.",
                                ],
                            },
                            FunctionMetadata {
                                name: "propose",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "threshold",
                                        ty: "Compact<MemberCount>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<<T as Trait<I>>::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " # <weight>",
                                    " - Bounded storage reads and writes.",
                                    " - Argument `threshold` has bearing on weight.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "vote",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "T::Hash",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "index",
                                        ty: "Compact<ProposalIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "approve",
                                        ty: "bool",
                                    },
                                ],
                                documentation: [
                                    " # <weight>",
                                    " - Bounded storage read and writes.",
                                    " - Will be slightly heavier if the proposal is approved / disapproved after the vote.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Proposed",
                                arguments: [
                                    "AccountId",
                                    "ProposalIndex",
                                    "Hash",
                                    "MemberCount",
                                ],
                                documentation: [
                                    " A motion (given hash) has been proposed (by given account) with a threshold (given",
                                    " `MemberCount`).",
                                ],
                            },
                            EventMetadata {
                                name: "Voted",
                                arguments: [
                                    "AccountId",
                                    "Hash",
                                    "bool",
                                    "MemberCount",
                                    "MemberCount",
                                ],
                                documentation: [
                                    " A motion (given hash) has been voted on by given account, leaving",
                                    " a tally (yes votes and no votes given respectively as `MemberCount`).",
                                ],
                            },
                            EventMetadata {
                                name: "Approved",
                                arguments: [
                                    "Hash",
                                ],
                                documentation: [
                                    " A motion was approved by the required threshold.",
                                ],
                            },
                            EventMetadata {
                                name: "Disapproved",
                                arguments: [
                                    "Hash",
                                ],
                                documentation: [
                                    " A motion was not approved by the required threshold.",
                                ],
                            },
                            EventMetadata {
                                name: "Executed",
                                arguments: [
                                    "Hash",
                                    "bool",
                                ],
                                documentation: [
                                    " A motion was executed; `bool` is true if returned without error.",
                                ],
                            },
                            EventMetadata {
                                name: "MemberExecuted",
                                arguments: [
                                    "Hash",
                                    "bool",
                                ],
                                documentation: [
                                    " A single member did some action; `bool` is true if returned without error.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "TechnicalCommittee",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Instance2Collective",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Proposals",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::Hash>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The hashes of the active proposals.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ProposalOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "<T as Trait<I>>::Proposal",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Actual proposal for a given hash, if it\'s current.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Voting",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::Hash",
                                        value: "Votes<T::AccountId>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Votes on a given proposal, if it is ongoing.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ProposalCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Proposals so far.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Members",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current members of the collective. This is stored sorted (just by value).",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_members",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new_members",
                                        ty: "Vec<T::AccountId>",
                                    },
                                ],
                                documentation: [
                                    " Set the collective\'s membership manually to `new_members`. Be nice to the chain and",
                                    " provide it pre-sorted.",
                                    "",
                                    " Requires root origin.",
                                ],
                            },
                            FunctionMetadata {
                                name: "execute",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<<T as Trait<I>>::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " Dispatch a proposal from a member using the `Member` origin.",
                                    "",
                                    " Origin must be a member of the collective.",
                                ],
                            },
                            FunctionMetadata {
                                name: "propose",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "threshold",
                                        ty: "Compact<MemberCount>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<<T as Trait<I>>::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " # <weight>",
                                    " - Bounded storage reads and writes.",
                                    " - Argument `threshold` has bearing on weight.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "vote",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "T::Hash",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "index",
                                        ty: "Compact<ProposalIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "approve",
                                        ty: "bool",
                                    },
                                ],
                                documentation: [
                                    " # <weight>",
                                    " - Bounded storage read and writes.",
                                    " - Will be slightly heavier if the proposal is approved / disapproved after the vote.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Proposed",
                                arguments: [
                                    "AccountId",
                                    "ProposalIndex",
                                    "Hash",
                                    "MemberCount",
                                ],
                                documentation: [
                                    " A motion (given hash) has been proposed (by given account) with a threshold (given",
                                    " `MemberCount`).",
                                ],
                            },
                            EventMetadata {
                                name: "Voted",
                                arguments: [
                                    "AccountId",
                                    "Hash",
                                    "bool",
                                    "MemberCount",
                                    "MemberCount",
                                ],
                                documentation: [
                                    " A motion (given hash) has been voted on by given account, leaving",
                                    " a tally (yes votes and no votes given respectively as `MemberCount`).",
                                ],
                            },
                            EventMetadata {
                                name: "Approved",
                                arguments: [
                                    "Hash",
                                ],
                                documentation: [
                                    " A motion was approved by the required threshold.",
                                ],
                            },
                            EventMetadata {
                                name: "Disapproved",
                                arguments: [
                                    "Hash",
                                ],
                                documentation: [
                                    " A motion was not approved by the required threshold.",
                                ],
                            },
                            EventMetadata {
                                name: "Executed",
                                arguments: [
                                    "Hash",
                                    "bool",
                                ],
                                documentation: [
                                    " A motion was executed; `bool` is true if returned without error.",
                                ],
                            },
                            EventMetadata {
                                name: "MemberExecuted",
                                arguments: [
                                    "Hash",
                                    "bool",
                                ],
                                documentation: [
                                    " A single member did some action; `bool` is true if returned without error.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "ElectionsPhragmen",
                    storage: Some(
                        StorageMetadata {
                            prefix: "PhragmenElection",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Members",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(T::AccountId, BalanceOf<T>)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current elected membership. Sorted based on account id.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "RunnersUp",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(T::AccountId, BalanceOf<T>)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current runners_up. Sorted based on low to high merit (worse to best runner).",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ElectionRounds",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The total number of vote rounds that have happened, excluding the upcoming one.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "VotesOf",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "Vec<T::AccountId>",
                                        is_linked: true,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Votes of a particular voter, with the round index of the votes.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "StakeOf",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "BalanceOf<T>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Locked stake of a voter.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Candidates",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The present candidate list. Sorted based on account id. A current member can never enter",
                                        " this vector and is always implicitly assumed to be a candidate.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "vote",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "votes",
                                        ty: "Vec<T::AccountId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Vote for a set of candidates for the upcoming round of election.",
                                    "",
                                    " The `votes` should:",
                                    "   - not be empty.",
                                    "   - be less than the number of candidates.",
                                    "",
                                    " Upon voting, `value` units of `who`\'s balance is locked and a bond amount is reserved.",
                                    " It is the responsibility of the caller to not place all of their balance into the lock",
                                    " and keep some for further transactions.",
                                    "",
                                    " # <weight>",
                                    " #### State",
                                    " Reads: O(1)",
                                    " Writes: O(V) given `V` votes. V is bounded by 16.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "remove_voter",
                                arguments: [],
                                documentation: [
                                    " Remove `origin` as a voter. This removes the lock and returns the bond.",
                                    "",
                                    " # <weight>",
                                    " #### State",
                                    " Reads: O(1)",
                                    " Writes: O(1)",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "report_defunct_voter",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "target",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Report `target` for being an defunct voter. In case of a valid report, the reporter is",
                                    " rewarded by the bond amount of `target`. Otherwise, the reporter itself is removed and",
                                    " their bond is slashed.",
                                    "",
                                    " A defunct voter is defined to be:",
                                    "   - a voter whose current submitted votes are all invalid. i.e. all of them are no",
                                    "     longer a candidate nor an active member.",
                                    "",
                                    " # <weight>",
                                    " #### State",
                                    " Reads: O(NLogM) given M current candidates and N votes for `target`.",
                                    " Writes: O(1)",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "submit_candidacy",
                                arguments: [],
                                documentation: [
                                    " Submit oneself for candidacy.",
                                    "",
                                    " A candidate will either:",
                                    "   - Lose at the end of the term and forfeit their deposit.",
                                    "   - Win and become a member. Members will eventually get their stash back.",
                                    "   - Become a runner-up. Runners-ups are reserved members in case one gets forcefully",
                                    "     removed.",
                                    "",
                                    " # <weight>",
                                    " #### State",
                                    " Reads: O(LogN) Given N candidates.",
                                    " Writes: O(1)",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "renounce_candidacy",
                                arguments: [],
                                documentation: [
                                    " Renounce one\'s intention to be a candidate for the next election round. 3 potential",
                                    " outcomes exist:",
                                    " - `origin` is a candidate and not elected in any set. In this case, the bond is",
                                    "   unreserved, returned and origin is removed as a candidate.",
                                    " - `origin` is a current runner up. In this case, the bond is unreserved, returned and",
                                    "   origin is removed as a runner.",
                                    " - `origin` is a current member. In this case, the bond is unreserved and origin is",
                                    "   removed as a member, consequently not being a candidate for the next round anymore.",
                                    "   Similar to [`remove_voter`], if replacement runners exists, they are immediately used.",
                                ],
                            },
                            FunctionMetadata {
                                name: "remove_member",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "who",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Remove a particular member from the set. This is effective immediately and the bond of",
                                    " the outgoing member is slashed.",
                                    "",
                                    " If a runner-up is available, then the best runner-up will be removed and replaces the",
                                    " outgoing member. Otherwise, a new phragmen round is started.",
                                    "",
                                    " Note that this does not affect the designated block number of the next election.",
                                    "",
                                    " # <weight>",
                                    " #### State",
                                    " Reads: O(do_phragmen)",
                                    " Writes: O(do_phragmen)",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewTerm",
                                arguments: [
                                    "Vec<(AccountId, Balance)>",
                                ],
                                documentation: [
                                    " A new term with new members. This indicates that enough candidates existed, not that",
                                    " enough have has been elected. The inner value must be examined for this purpose.",
                                ],
                            },
                            EventMetadata {
                                name: "EmptyTerm",
                                arguments: [],
                                documentation: [
                                    " No (or not enough) candidates existed for this round.",
                                ],
                            },
                            EventMetadata {
                                name: "MemberKicked",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " A member has been removed. This should always be followed by either `NewTerm` ot",
                                    " `EmptyTerm`.",
                                ],
                            },
                            EventMetadata {
                                name: "MemberRenounced",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " A member has renounced their candidacy.",
                                ],
                            },
                            EventMetadata {
                                name: "VoterReported",
                                arguments: [
                                    "AccountId",
                                    "AccountId",
                                    "bool",
                                ],
                                documentation: [
                                    " A voter (first element) was reported (byt the second element) with the the report being",
                                    " successful or not (third element).",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "CandidacyBond",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                16,
                                165,
                                212,
                                232,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [],
                        },
                        ModuleConstantMetadata {
                            name: "VotingBond",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                116,
                                59,
                                164,
                                11,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [],
                        },
                        ModuleConstantMetadata {
                            name: "DesiredMembers",
                            ty: "u32",
                            value: [
                                13,
                                0,
                                0,
                                0,
                            ],
                            documentation: [],
                        },
                        ModuleConstantMetadata {
                            name: "DesiredRunnersUp",
                            ty: "u32",
                            value: [
                                7,
                                0,
                                0,
                                0,
                            ],
                            documentation: [],
                        },
                        ModuleConstantMetadata {
                            name: "TermDuration",
                            ty: "T::BlockNumber",
                            value: [
                                176,
                                4,
                                0,
                                0,
                            ],
                            documentation: [],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "TechnicalMembership",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Instance1Membership",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Members",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<T::AccountId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current membership, stored as an ordered Vec.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "add_member",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "who",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Add a member `who` to the set.",
                                    "",
                                    " May only be called from `AddOrigin` or root.",
                                ],
                            },
                            FunctionMetadata {
                                name: "remove_member",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "who",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Remove a member `who` from the set.",
                                    "",
                                    " May only be called from `RemoveOrigin` or root.",
                                ],
                            },
                            FunctionMetadata {
                                name: "swap_member",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "remove",
                                        ty: "T::AccountId",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "add",
                                        ty: "T::AccountId",
                                    },
                                ],
                                documentation: [
                                    " Swap out one member `remove` for another `add`.",
                                    "",
                                    " May only be called from `SwapOrigin` or root.",
                                ],
                            },
                            FunctionMetadata {
                                name: "reset_members",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "members",
                                        ty: "Vec<T::AccountId>",
                                    },
                                ],
                                documentation: [
                                    " Change the membership to a new set, disregarding the existing membership. Be nice and",
                                    " pass `members` pre-sorted.",
                                    "",
                                    " May only be called from `ResetOrigin` or root.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "MemberAdded",
                                arguments: [],
                                documentation: [
                                    " The given member was added; see the transaction for who.",
                                ],
                            },
                            EventMetadata {
                                name: "MemberRemoved",
                                arguments: [],
                                documentation: [
                                    " The given member was removed; see the transaction for who.",
                                ],
                            },
                            EventMetadata {
                                name: "MembersSwapped",
                                arguments: [],
                                documentation: [
                                    " Two members were swapped; see the transaction for who.",
                                ],
                            },
                            EventMetadata {
                                name: "MembersReset",
                                arguments: [],
                                documentation: [
                                    " The membership was reset; see the transaction for who the new set is.",
                                ],
                            },
                            EventMetadata {
                                name: "Dummy",
                                arguments: [
                                    "rstd::marker::PhantomData<(AccountId, Event)>",
                                ],
                                documentation: [
                                    " Phantom member, never used.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Treasury",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Treasury",
                            entries: [
                                StorageEntryMetadata {
                                    name: "ProposalCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "ProposalIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Number of proposals that have been made.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Proposals",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ProposalIndex",
                                        value: "Proposal<T::AccountId, BalanceOf<T>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Proposals that have been made.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Approvals",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ProposalIndex>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Proposal indices that have been approved but not yet awarded.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "propose_spend",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "beneficiary",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Put forward a suggestion for spending. A deposit proportional to the value",
                                    " is reserved and slashed if the proposal is rejected. It is returned once the",
                                    " proposal is awarded.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - Limited storage reads.",
                                    " - One DB change, one extra DB entry.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "reject_proposal",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_id",
                                        ty: "Compact<ProposalIndex>",
                                    },
                                ],
                                documentation: [
                                    " Reject a proposed spend. The original deposit will be slashed.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - Limited storage reads.",
                                    " - One DB clear.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "approve_proposal",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal_id",
                                        ty: "Compact<ProposalIndex>",
                                    },
                                ],
                                documentation: [
                                    " Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                                    " and the original deposit will be returned.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - Limited storage reads.",
                                    " - One DB change.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Proposed",
                                arguments: [
                                    "ProposalIndex",
                                ],
                                documentation: [
                                    " New proposal.",
                                ],
                            },
                            EventMetadata {
                                name: "Spending",
                                arguments: [
                                    "Balance",
                                ],
                                documentation: [
                                    " We have ended a spend period and will now allocate funds.",
                                ],
                            },
                            EventMetadata {
                                name: "Awarded",
                                arguments: [
                                    "ProposalIndex",
                                    "Balance",
                                    "AccountId",
                                ],
                                documentation: [
                                    " Some funds have been allocated.",
                                ],
                            },
                            EventMetadata {
                                name: "Burnt",
                                arguments: [
                                    "Balance",
                                ],
                                documentation: [
                                    " Some of our funds have been burnt.",
                                ],
                            },
                            EventMetadata {
                                name: "Rollover",
                                arguments: [
                                    "Balance",
                                ],
                                documentation: [
                                    " Spending has finished; this is the amount that rolls over until next spend.",
                                ],
                            },
                            EventMetadata {
                                name: "Deposit",
                                arguments: [
                                    "Balance",
                                ],
                                documentation: [
                                    " Some funds have been deposited.",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "ProposalBond",
                            ty: "Permill",
                            value: [
                                80,
                                195,
                                0,
                                0,
                            ],
                            documentation: [
                                " Fraction of a proposal\'s value that should be bonded in order to place the proposal.",
                                " An accepted proposal gets these back. A rejected proposal does not.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "ProposalBondMinimum",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                16,
                                165,
                                212,
                                232,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " Minimum amount of funds that should be placed in a deposit for making a proposal.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "SpendPeriod",
                            ty: "T::BlockNumber",
                            value: [
                                128,
                                81,
                                1,
                                0,
                            ],
                            documentation: [
                                " Period between successive spends.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "Burn",
                            ty: "Permill",
                            value: [
                                16,
                                39,
                                0,
                                0,
                            ],
                            documentation: [
                                " Percentage of spare funds (if any) that are burnt per spend period.",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Claims",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Claims",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Claims",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "EthereumAddress",
                                        value: "BalanceOf<T>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [],
                                },
                                StorageEntryMetadata {
                                    name: "Total",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "BalanceOf<T>",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "claim",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "dest",
                                        ty: "T::AccountId",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "ethereum_signature",
                                        ty: "EcdsaSignature",
                                    },
                                ],
                                documentation: [
                                    " Make a claim.",
                                ],
                            },
                            FunctionMetadata {
                                name: "mint_claim",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "who",
                                        ty: "EthereumAddress",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "value",
                                        ty: "BalanceOf<T>",
                                    },
                                ],
                                documentation: [
                                    " Add a new claim, if you are root.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Claimed",
                                arguments: [
                                    "AccountId",
                                    "EthereumAddress",
                                    "Balance",
                                ],
                                documentation: [
                                    " Someone claimed some DOTs.",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "Prefix",
                            ty: "&[u8]",
                            value: [
                                124,
                                80,
                                97,
                                121,
                                32,
                                75,
                                83,
                                77,
                                115,
                                32,
                                116,
                                111,
                                32,
                                116,
                                104,
                                101,
                                32,
                                75,
                                117,
                                115,
                                97,
                                109,
                                97,
                                32,
                                97,
                                99,
                                99,
                                111,
                                117,
                                110,
                                116,
                                58,
                            ],
                            documentation: [
                                " The Prefix that is used in signed Ethereum messages for this network",
                            ],
                        },
                    ],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Parachains",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Parachains",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Authorities",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ValidatorId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " All authorities\' keys at the moment.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Code",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "Vec<u8>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The parachains registered at present.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Heads",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "Vec<u8>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The heads of the parachains registered at present.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Watermarks",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "T::BlockNumber",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The watermark heights of the parachains registered at present.",
                                        " For every parachain, this is the block height from which all messages targeting",
                                        " that parachain have been processed. Can be `None` only if the parachain doesn\'t exist.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "UnroutedIngress",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "(T::BlockNumber, ParaId)",
                                        value: "Vec<(ParaId, Hash)>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Unrouted ingress. Maps (BlockNumber, to_chain) pairs to [(from_chain, egress_root)].",
                                        "",
                                        " There may be an entry under (i, p) in this map for every i between the parachain\'s",
                                        " watermark and the current block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "RelayDispatchQueue",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "Vec<UpwardMessage>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Messages ready to be dispatched onto the relay chain. It is subject to",
                                        " `MAX_MESSAGE_COUNT` and `WATERMARK_MESSAGE_SIZE`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "RelayDispatchQueueSize",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "(u32, u32)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Size of the dispatch queues. Separated from actual data in order to avoid costly",
                                        " decoding when checking receipt validity. First item in tuple is the count of messages",
                                        "\tsecond if the total length (in bytes) of the message payloads.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NeedsDispatch",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ParaId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The ordered list of ParaIds that have a `RelayDispatchQueue` entry.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DidUpdate",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ParaId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Some if the parachain heads get updated in this block, along with the parachain IDs that",
                                        " did update. Ordered in the same way as `registrar::Active` (i.e. by ParaId).",
                                        "",
                                        " None if not yet updated.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_heads",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "heads",
                                        ty: "Vec<AttestedCandidate>",
                                    },
                                ],
                                documentation: [
                                    " Provide candidate receipts for parachains, in ascending order by id.",
                                ],
                            },
                        ],
                    ),
                    event: None,
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Attestations",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Attestations",
                            entries: [
                                StorageEntryMetadata {
                                    name: "RecentParaBlocks",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::BlockNumber",
                                        value: "IncludedBlocks<T>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " A mapping from modular block number (n % AttestationPeriod)",
                                        " to session index and the list of candidate hashes.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ParaBlockAttestations",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::DoubleMap {
                                        hasher: StorageHasher::Blake2_256,
                                        key1: "T::BlockNumber",
                                        key2: "Hash",
                                        value: "BlockAttestations<T>",
                                        key2_hasher: StorageHasher::Blake2_128,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Attestations on a recent parachain block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "DidUpdate",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "bool",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "more_attestations",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "_more",
                                        ty: "MoreAttestations",
                                    },
                                ],
                                documentation: [
                                    " Provide candidate receipts for parachains, in ascending order by id.",
                                ],
                            },
                        ],
                    ),
                    event: None,
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Slots",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Slots",
                            entries: [
                                StorageEntryMetadata {
                                    name: "AuctionCounter",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "AuctionIndex",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The number of auctions that been started so far.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ManagedIds",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ParaId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Ordered list of all `ParaId` values that are managed by this module. This includes",
                                        " chains that are not yet deployed (but have won an auction in the future).",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Deposits",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "Vec<BalanceOf<T>>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Various amounts on deposit for each parachain. An entry in `ManagedIds` implies a non-",
                                        " default entry here.",
                                        "",
                                        " The actual amount locked on its behalf at any time is the maximum item in this list. The",
                                        " first item in the list is the amount locked for the current Lease Period. Following",
                                        " items are for the subsequent lease periods.",
                                        "",
                                        " The default value (an empty list) implies that the parachain no longer exists (or never",
                                        " existed) as far as this module is concerned.",
                                        "",
                                        " If a parachain doesn\'t exist *yet* but is scheduled to exist in the future, then it",
                                        " will be left-padded with one or more zeroes to denote the fact that nothing is held on",
                                        " deposit for the non-existent chain currently, but is held at some point in the future.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "AuctionInfo",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Plain(
                                        "(LeasePeriodOf<T>, T::BlockNumber)",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Information relating to the current auction, if there is one.",
                                        "",
                                        " The first item in the tuple is the lease period index that the first of the four",
                                        " contiguous lease periods on auction is for. The second is the block number when the",
                                        " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Winning",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::BlockNumber",
                                        value: "WinningData<T>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The winning bids for each of the 10 ranges at each block in the final Ending Period of",
                                        " the current auction. The map\'s key is the 0-based index into the Ending Period. The",
                                        " first block of the ending period is 0; the last is `EndingPeriod - 1`.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "ReservedAmounts",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "Bidder<T::AccountId>",
                                        value: "BalanceOf<T>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Amounts currently reserved in the accounts of the bidders currently winning",
                                        " (sub-)ranges.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "OnboardQueue",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "LeasePeriodOf<T>",
                                        value: "Vec<ParaId>",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The set of Para IDs that have won and need to be on-boarded at an upcoming lease-period.",
                                        " This is cleared out on the first block of the lease period.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Onboarding",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "(LeasePeriodOf<T>, IncomingParachain<T::AccountId, T::Hash>)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The actual on-boarding information. Only exists when one of the following is true:",
                                        " - It is before the lease period that the parachain should be on-boarded.",
                                        " - The full on-boarding information has not yet been provided and the parachain is not",
                                        " yet due to be off-boarded.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Offboarding",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "T::AccountId",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Off-boarding account; currency held on deposit for the parachain gets placed here if the",
                                        " parachain gets off-boarded; i.e. its lease period is up and it isn\'t renewed.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "new_auction",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "duration",
                                        ty: "Compact<T::BlockNumber>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "lease_period_index",
                                        ty: "Compact<LeasePeriodOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Create a new auction.",
                                    "",
                                    " This can only happen when there isn\'t already an auction in progress and may only be",
                                    " called by the root origin. Accepts the `duration` of this auction and the",
                                    " `lease_period_index` of the initial lease period of the four that are to be auctioned.",
                                ],
                            },
                            FunctionMetadata {
                                name: "bid",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "sub",
                                        ty: "Compact<SubId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "auction_index",
                                        ty: "Compact<AuctionIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "first_slot",
                                        ty: "Compact<LeasePeriodOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "last_slot",
                                        ty: "Compact<LeasePeriodOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "amount",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Make a new bid from an account (including a parachain account) for deploying a new",
                                    " parachain.",
                                    "",
                                    " Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                                    " bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                                    "",
                                    " - `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
                                    " funded by) the same account.",
                                    " - `auction_index` is the index of the auction to bid on. Should just be the present",
                                    " value of `AuctionCounter`.",
                                    " - `first_slot` is the first lease period index of the range to bid on. This is the",
                                    " absolute lease period index value, not an auction-specific offset.",
                                    " - `last_slot` is the last lease period index of the range to bid on. This is the",
                                    " absolute lease period index value, not an auction-specific offset.",
                                    " - `amount` is the amount to bid to be held as deposit for the parachain should the",
                                    " bid win. This amount is held throughout the range.",
                                ],
                            },
                            FunctionMetadata {
                                name: "bid_renew",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "auction_index",
                                        ty: "Compact<AuctionIndex>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "first_slot",
                                        ty: "Compact<LeasePeriodOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "last_slot",
                                        ty: "Compact<LeasePeriodOf<T>>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "amount",
                                        ty: "Compact<BalanceOf<T>>",
                                    },
                                ],
                                documentation: [
                                    " Make a new bid from a parachain account for renewing that (pre-existing) parachain.",
                                    "",
                                    " The origin *must* be a parachain account.",
                                    "",
                                    " Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                                    " bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                                    "",
                                    " - `auction_index` is the index of the auction to bid on. Should just be the present",
                                    " value of `AuctionCounter`.",
                                    " - `first_slot` is the first lease period index of the range to bid on. This is the",
                                    " absolute lease period index value, not an auction-specific offset.",
                                    " - `last_slot` is the last lease period index of the range to bid on. This is the",
                                    " absolute lease period index value, not an auction-specific offset.",
                                    " - `amount` is the amount to bid to be held as deposit for the parachain should the",
                                    " bid win. This amount is held throughout the range.",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_offboarding",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "dest",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Set the off-boarding information for a parachain.",
                                    "",
                                    " The origin *must* be a parachain account.",
                                    "",
                                    " - `dest` is the destination account to receive the parachain\'s deposit.",
                                ],
                            },
                            FunctionMetadata {
                                name: "fix_deploy_data",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "sub",
                                        ty: "Compact<SubId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "para_id",
                                        ty: "Compact<ParaId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "code_hash",
                                        ty: "T::Hash",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "initial_head_data",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Set the deploy information for a successful bid to deploy a new parachain.",
                                    "",
                                    " - `origin` must be the successful bidder account.",
                                    " - `sub` is the sub-bidder ID of the bidder.",
                                    " - `para_id` is the parachain ID allotted to the winning bidder.",
                                    " - `code_hash` is the hash of the parachain\'s Wasm validation function.",
                                    " - `initial_head_data` is the parachain\'s initial head data.",
                                ],
                            },
                            FunctionMetadata {
                                name: "elaborate_deploy_data",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "para_id",
                                        ty: "Compact<ParaId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "code",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Note a new parachain\'s code.",
                                    "",
                                    " This must be called after `fix_deploy_data` and `code` must be the preimage of the",
                                    " `code_hash` passed there for the same `para_id`.",
                                    "",
                                    " This may be called before or after the beginning of the parachain\'s first lease period.",
                                    " If called before then the parachain will become active at the first block of its",
                                    " starting lease period. If after, then it will become active immediately after this call.",
                                    "",
                                    " - `_origin` is irrelevant.",
                                    " - `para_id` is the parachain ID whose code will be elaborated.",
                                    " - `code` is the preimage of the registered `code_hash` of `para_id`.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NewLeasePeriod",
                                arguments: [
                                    "LeasePeriod",
                                ],
                                documentation: [
                                    " A new lease period is beginning.",
                                ],
                            },
                            EventMetadata {
                                name: "AuctionStarted",
                                arguments: [
                                    "AuctionIndex",
                                    "LeasePeriod",
                                    "BlockNumber",
                                ],
                                documentation: [
                                    " An auction started. Provides its index and the block number where it will begin to",
                                    " close and the first lease period of the quadruplet that is auctioned.",
                                ],
                            },
                            EventMetadata {
                                name: "AuctionClosed",
                                arguments: [
                                    "AuctionIndex",
                                ],
                                documentation: [
                                    " An auction ended. All funds become unreserved.",
                                ],
                            },
                            EventMetadata {
                                name: "WonDeploy",
                                arguments: [
                                    "NewBidder<AccountId>",
                                    "SlotRange",
                                    "ParaId",
                                    "Balance",
                                ],
                                documentation: [
                                    " Someone won the right to deploy a parachain. Balance amount is deducted for deposit.",
                                ],
                            },
                            EventMetadata {
                                name: "WonRenewal",
                                arguments: [
                                    "ParaId",
                                    "SlotRange",
                                    "Balance",
                                    "Balance",
                                ],
                                documentation: [
                                    " An existing parachain won the right to continue.",
                                    " First balance is the extra amount reseved. Second is the total amount reserved.",
                                ],
                            },
                            EventMetadata {
                                name: "Reserved",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                    "Balance",
                                ],
                                documentation: [
                                    " Funds were reserved for a winning bid. First balance is the extra amount reserved.",
                                    " Second is the total.",
                                ],
                            },
                            EventMetadata {
                                name: "Unreserved",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " Funds were unreserved since bidder is no longer active.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Registrar",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Registrar",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Parachains",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<ParaId>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [],
                                },
                                StorageEntryMetadata {
                                    name: "ThreadCount",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "u32",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The number of threads to schedule per block.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "SelectedThreads",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<Vec<(ParaId, CollatorId)>>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " An array of the queue of set of threads scheduled for the coming blocks; ordered by",
                                        " ascending para ID. There can be no duplicates of para ID in each list item.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Active",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<(ParaId, Option<(CollatorId, Retriable)>)>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Parathreads/chains scheduled for execution this block. If the collator ID is set, then",
                                        " a particular collator has already been chosen for the next block, and no other collator",
                                        " may provide the block. In this case we allow the possibility of the combination being",
                                        " retried in a later block, expressed by `Retriable`.",
                                        "",
                                        " Ordered by ParaId.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "NextFreeId",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "ParaId",
                                    ),
                                    default: [
                                        232,
                                        3,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The next unused ParaId value. Start this high in order to keep low numbers for",
                                        " system-level chains.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "PendingSwap",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "ParaId",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Pending swap operations.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Paras",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "ParaInfo",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " Map of all registered parathreads/chains.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "RetryQueue",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "Vec<Vec<(ParaId, CollatorId)>>",
                                    ),
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The current queue for parathreads that should be retried.",
                                    ],
                                },
                                StorageEntryMetadata {
                                    name: "Debtors",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "ParaId",
                                        value: "T::AccountId",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " Users who have paid a parathread\'s deposit",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "register_para",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "id",
                                        ty: "Compact<ParaId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "info",
                                        ty: "ParaInfo",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "code",
                                        ty: "Vec<u8>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "initial_head_data",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Register a parachain with given code.",
                                    " Fails if given ID is already used.",
                                ],
                            },
                            FunctionMetadata {
                                name: "deregister_para",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "id",
                                        ty: "Compact<ParaId>",
                                    },
                                ],
                                documentation: [
                                    " Deregister a parachain with given id",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_thread_count",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "count",
                                        ty: "u32",
                                    },
                                ],
                                documentation: [
                                    " Reset the number of parathreads that can pay to be scheduled in a single block.",
                                    "",
                                    " - `count`: The number of parathreads.",
                                    "",
                                    " Must be called from Root origin.",
                                ],
                            },
                            FunctionMetadata {
                                name: "register_parathread",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "code",
                                        ty: "Vec<u8>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "initial_head_data",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Register a parathread for immediate use.",
                                    "",
                                    " Must be sent from a Signed origin that is able to have ParathreadDeposit reserved.",
                                    " `code` and `initial_head_data` are used to initialize the parathread\'s state.",
                                ],
                            },
                            FunctionMetadata {
                                name: "select_parathread",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "_id",
                                        ty: "Compact<ParaId>",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "_collator",
                                        ty: "CollatorId",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "_head_hash",
                                        ty: "T::Hash",
                                    },
                                ],
                                documentation: [
                                    " Place a bid for a parathread to be progressed in the next block.",
                                    "",
                                    " This is a kind of special transaction that should by heavily prioritized in the",
                                    " transaction pool according to the `value`; only `ThreadCount` of them may be presented",
                                    " in any single block.",
                                ],
                            },
                            FunctionMetadata {
                                name: "deregister_parathread",
                                arguments: [],
                                documentation: [
                                    " Deregister a parathread and retrieve the deposit.",
                                    "",
                                    " Must be sent from a `Parachain` origin which is currently a parathread.",
                                    "",
                                    " Ensure that before calling this that any funds you want emptied from the parathread\'s",
                                    " account is moved out; after this it will be impossible to retrieve them (without",
                                    " governance intervention).",
                                ],
                            },
                            FunctionMetadata {
                                name: "swap",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "other",
                                        ty: "Compact<ParaId>",
                                    },
                                ],
                                documentation: [
                                    " Swap a parachain with another parachain or parathread. The origin must be a `Parachain`.",
                                    " The swap will happen only if there is already an opposite swap pending. If there is not,",
                                    " the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
                                    "",
                                    " The `ParaId`s remain mapped to the same head data and code so external code can rely on",
                                    " `ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
                                    " scheduling info (i.e. whether they\'re a parathread or parachain), auction information",
                                    " and the auction deposit are switched.",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "ParathreadRegistered",
                                arguments: [
                                    "ParaId",
                                ],
                                documentation: [
                                    " A parathread was registered; its new ID is supplied.",
                                ],
                            },
                            EventMetadata {
                                name: "ParathreadDeregistered",
                                arguments: [
                                    "ParaId",
                                ],
                                documentation: [
                                    " The parathread of the supplied ID was de-registered.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Sudo",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Sudo",
                            entries: [
                                StorageEntryMetadata {
                                    name: "Key",
                                    modifier: StorageEntryModifier::Default,
                                    ty: StorageEntryType::Plain(
                                        "T::AccountId",
                                    ),
                                    default: [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                    documentation: [
                                        " The `AccountId` of the sudo key.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "sudo",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<T::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - Limited storage reads.",
                                    " - One DB write (event).",
                                    " - Unknown weight of derivative `proposal` execution.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "set_key",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "new",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - Limited storage reads.",
                                    " - One DB change.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "sudo_as",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "who",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "proposal",
                                        ty: "Box<T::Proposal>",
                                    },
                                ],
                                documentation: [
                                    " Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                                    " a given account.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - Limited storage reads.",
                                    " - One DB write (event).",
                                    " - Unknown weight of derivative `proposal` execution.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "Sudid",
                                arguments: [
                                    "bool",
                                ],
                                documentation: [
                                    " A sudo just took place.",
                                ],
                            },
                            EventMetadata {
                                name: "KeyChanged",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " The sudoer just switched identity; the old key is supplied.",
                                ],
                            },
                            EventMetadata {
                                name: "SudoAsDone",
                                arguments: [
                                    "bool",
                                ],
                                documentation: [
                                    " A sudo just took place.",
                                ],
                            },
                        ],
                    ),
                    constants: [],
                    errors: [],
                },
                ModuleMetadata {
                    name: "Nicks",
                    storage: Some(
                        StorageMetadata {
                            prefix: "Sudo",
                            entries: [
                                StorageEntryMetadata {
                                    name: "NameOf",
                                    modifier: StorageEntryModifier::Optional,
                                    ty: StorageEntryType::Map {
                                        hasher: StorageHasher::Blake2_256,
                                        key: "T::AccountId",
                                        value: "(Vec<u8>, BalanceOf<T>)",
                                        is_linked: false,
                                    },
                                    default: [
                                        0,
                                    ],
                                    documentation: [
                                        " The lookup table for names.",
                                    ],
                                },
                            ],
                        },
                    ),
                    calls: Some(
                        [
                            FunctionMetadata {
                                name: "set_name",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "name",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Set an account\'s name. The name should be a UTF-8-encoded string by convention, though",
                                    " we don\'t check it.",
                                    "",
                                    " The name may not be more than `T::MaxLength` bytes, nor less than `T::MinLength` bytes.",
                                    "",
                                    " If the account doesn\'t already have a name, then a fee of `ReservationFee` is reserved",
                                    " in the account.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - At most one balance operation.",
                                    " - One storage read/write.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "clear_name",
                                arguments: [],
                                documentation: [
                                    " Clear an account\'s name and return the deposit. Fails if the account was not named.",
                                    "",
                                    " The dispatch origin for this call must be _Signed_.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - One balance operation.",
                                    " - One storage read/write.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "kill_name",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "target",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                ],
                                documentation: [
                                    " Remove an account\'s name and take charge of the deposit.",
                                    "",
                                    " Fails if `who` has not been named. The deposit is dealt with through `T::Slashed`",
                                    " imbalance handler.",
                                    "",
                                    " The dispatch origin for this call must be _Root_ or match `T::ForceOrigin`.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - One unbalanced handler (probably a balance transfer)",
                                    " - One storage read/write.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                            FunctionMetadata {
                                name: "force_name",
                                arguments: [
                                    FunctionArgumentMetadata {
                                        name: "target",
                                        ty: "<T::Lookup as StaticLookup>::Source",
                                    },
                                    FunctionArgumentMetadata {
                                        name: "name",
                                        ty: "Vec<u8>",
                                    },
                                ],
                                documentation: [
                                    " Set a third-party account\'s name with no deposit.",
                                    "",
                                    " No length checking is done on the name.",
                                    "",
                                    " The dispatch origin for this call must be _Root_ or match `T::ForceOrigin`.",
                                    "",
                                    " # <weight>",
                                    " - O(1).",
                                    " - At most one balance operation.",
                                    " - One storage read/write.",
                                    " - One event.",
                                    " # </weight>",
                                ],
                            },
                        ],
                    ),
                    event: Some(
                        [
                            EventMetadata {
                                name: "NameSet",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " A name was set.",
                                ],
                            },
                            EventMetadata {
                                name: "NameForced",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " A name was forcibly set.",
                                ],
                            },
                            EventMetadata {
                                name: "NameChanged",
                                arguments: [
                                    "AccountId",
                                ],
                                documentation: [
                                    " A name was changed.",
                                ],
                            },
                            EventMetadata {
                                name: "NameCleared",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " A name was cleared, and the given balance returned.",
                                ],
                            },
                            EventMetadata {
                                name: "NameKilled",
                                arguments: [
                                    "AccountId",
                                    "Balance",
                                ],
                                documentation: [
                                    " A name was removed and the given balance slashed.",
                                ],
                            },
                        ],
                    ),
                    constants: [
                        ModuleConstantMetadata {
                            name: "ReservationFee",
                            ty: "BalanceOf<T>",
                            value: [
                                0,
                                228,
                                11,
                                84,
                                2,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " Reservation fee.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "MinLength",
                            ty: "u32",
                            value: [
                                3,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The minimum length a name may be.",
                            ],
                        },
                        ModuleConstantMetadata {
                            name: "MaxLength",
                            ty: "u32",
                            value: [
                                16,
                                0,
                                0,
                                0,
                            ],
                            documentation: [
                                " The maximum length a name may be.",
                            ],
                        },
                    ],
                    errors: [],
                },
            ],
        },
    ),
)
test metadata::tests::should_create_metadata ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out

